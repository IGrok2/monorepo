/// The model for a Team
model Team {
  id                   String              @id @default(cuid())
  /// The name of the team
  name                 String
  /// The projects this team owns
  projects             Project[]
  /// The users which are a member of this team
  members              Member[]
  /// The container registries this team controls
  container_registries ContainerRegistry[]
  /// The GitHub integrations this team controls
  git_namespaces       GitNamespace[]
  /// Who's paying?!
  stripeCustomerId     String?             @map("stripe_customer_id")
}

/// GitHub credentials and config
model GitNamespace {
  id                           String    @id @default(cuid())
  /// Reference to the team
  team                         Team?     @relation(fields: [team_id], references: [id])
  team_id                      String?
  /// The installation ID from GitHub
  install_id                   Int?
  /// The pending authentication code from GitHub
  pending_auth_code            String?
  /// When this auth code was started (past 15 minutes, it should expire)
  pending_auth_code_created_at DateTime?
  /// The repos backed by this namepsace
  GitRepo                      GitRepo[]
}

/// A model for a project
model Project {
  id           String        @id @default(cuid())
  /// The name of this project
  name         String
  /// The environments this project has
  environments Environment[]
  /// The apps this this project has
  apps         App[]
  /// The volumes this project has
  volumes      Volume[]
  /// Reference to the team that owns this project
  team_id      String
  team         Team          @relation(fields: [team_id], references: [id])
}

/// A proverbial join table for a member of a team
model Member {
  id   String     @id @default(cuid())
  /// What role the user has in this organization
  role MemberRole

  invitedAt            DateTime  @default(now()) @map("invited_at")
  invitationAccepted   Boolean   @default(false) @map("invitation_accepted")
  invitationAcceptedAt DateTime? @map("invitation_accepted_at")

  /// Reference to the user
  user_id String
  user    User    @relation(references: [id], fields: [user_id])
  /// Reference to the team
  team_id String? @map("team_id")
  team    Team?   @relation(fields: [team_id], references: [id])
}

/// The environment in a project - to contain secrets
model Environment {
  id         String   @id @default(cuid())
  /// The name of the environment
  name       String
  /// The secrets the environment contains
  secrets    Secret[]
  /// The reference to the project
  project    Project  @relation(fields: [project_id], references: [id])
  project_id String
}

/// A model that represents the shared secrets
model Secret {
  id             String       @id @default(cuid())
  /// Key of the secret
  key            String
  /// Value of the secret
  value          String
  /// All secrets are opaque currently
  type           SecretType
  /// Reference to the project
  project        Project      @relation(references: [id], fields: [project_id])
  project_id     String
  /// Reference to the environment
  environment    Environment? @relation(fields: [environment_id], references: [id])
  environment_id String?
}

/// A volume that holds data
model Volume {
  id   String @id @default(cuid())
  /// Name of the volume
  name String
  /// Size of the volume in Gi
  size Int

  /// Reference to the location the volume is in
  location_id String
  location    Location  @relation(fields: [location_id], references: [id])
  /// Reference to the project the volume is in
  project     Project   @relation(fields: [project_id], references: [id])
  project_id  String
  storage     Storage[]
}

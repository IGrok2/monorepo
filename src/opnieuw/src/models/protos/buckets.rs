// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `buckets.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:QueryResponse)
pub struct QueryResponse {
    // message fields
    // @@protoc_insertion_point(field:QueryResponse.success)
    pub success: bool,
    // special fields
    // @@protoc_insertion_point(special_field:QueryResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryResponse {
    fn default() -> &'a QueryResponse {
        <QueryResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryResponse {
    pub fn new() -> QueryResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "success",
            |m: &QueryResponse| { &m.success },
            |m: &mut QueryResponse| { &mut m.success },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryResponse>(
            "QueryResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryResponse {
    const NAME: &'static str = "QueryResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryResponse {
        QueryResponse::new()
    }

    fn clear(&mut self) {
        self.success = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryResponse {
        static instance: QueryResponse = QueryResponse {
            success: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:NewBucketSchema)
pub struct NewBucketSchema {
    // message fields
    // @@protoc_insertion_point(field:NewBucketSchema.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:NewBucketSchema.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:NewBucketSchema.threshold)
    pub threshold: i32,
    // @@protoc_insertion_point(field:NewBucketSchema.timeout)
    pub timeout: i32,
    // special fields
    // @@protoc_insertion_point(special_field:NewBucketSchema.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NewBucketSchema {
    fn default() -> &'a NewBucketSchema {
        <NewBucketSchema as ::protobuf::Message>::default_instance()
    }
}

impl NewBucketSchema {
    pub fn new() -> NewBucketSchema {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "domain",
            |m: &NewBucketSchema| { &m.domain },
            |m: &mut NewBucketSchema| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &NewBucketSchema| { &m.id },
            |m: &mut NewBucketSchema| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "threshold",
            |m: &NewBucketSchema| { &m.threshold },
            |m: &mut NewBucketSchema| { &mut m.threshold },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timeout",
            |m: &NewBucketSchema| { &m.timeout },
            |m: &mut NewBucketSchema| { &mut m.timeout },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NewBucketSchema>(
            "NewBucketSchema",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NewBucketSchema {
    const NAME: &'static str = "NewBucketSchema";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.domain = is.read_string()?;
                },
                18 => {
                    self.id = is.read_string()?;
                },
                24 => {
                    self.threshold = is.read_int32()?;
                },
                32 => {
                    self.timeout = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if self.threshold != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.threshold);
        }
        if self.timeout != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.timeout);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if self.threshold != 0 {
            os.write_int32(3, self.threshold)?;
        }
        if self.timeout != 0 {
            os.write_int32(4, self.timeout)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NewBucketSchema {
        NewBucketSchema::new()
    }

    fn clear(&mut self) {
        self.domain.clear();
        self.id.clear();
        self.threshold = 0;
        self.timeout = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NewBucketSchema {
        static instance: NewBucketSchema = NewBucketSchema {
            domain: ::std::string::String::new(),
            id: ::std::string::String::new(),
            threshold: 0,
            timeout: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NewBucketSchema {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NewBucketSchema").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NewBucketSchema {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NewBucketSchema {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:UpdateBucketSchema)
pub struct UpdateBucketSchema {
    // message fields
    // @@protoc_insertion_point(field:UpdateBucketSchema.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:UpdateBucketSchema.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:UpdateBucketSchema.threshold)
    pub threshold: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:UpdateBucketSchema.timeout)
    pub timeout: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:UpdateBucketSchema.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateBucketSchema {
    fn default() -> &'a UpdateBucketSchema {
        <UpdateBucketSchema as ::protobuf::Message>::default_instance()
    }
}

impl UpdateBucketSchema {
    pub fn new() -> UpdateBucketSchema {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "domain",
            |m: &UpdateBucketSchema| { &m.domain },
            |m: &mut UpdateBucketSchema| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &UpdateBucketSchema| { &m.id },
            |m: &mut UpdateBucketSchema| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "threshold",
            |m: &UpdateBucketSchema| { &m.threshold },
            |m: &mut UpdateBucketSchema| { &mut m.threshold },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "timeout",
            |m: &UpdateBucketSchema| { &m.timeout },
            |m: &mut UpdateBucketSchema| { &mut m.timeout },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateBucketSchema>(
            "UpdateBucketSchema",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateBucketSchema {
    const NAME: &'static str = "UpdateBucketSchema";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.domain = is.read_string()?;
                },
                18 => {
                    self.id = is.read_string()?;
                },
                24 => {
                    self.threshold = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.timeout = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if let Some(v) = self.threshold {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.timeout {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if let Some(v) = self.threshold {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.timeout {
            os.write_int32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateBucketSchema {
        UpdateBucketSchema::new()
    }

    fn clear(&mut self) {
        self.domain.clear();
        self.id.clear();
        self.threshold = ::std::option::Option::None;
        self.timeout = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateBucketSchema {
        static instance: UpdateBucketSchema = UpdateBucketSchema {
            domain: ::std::string::String::new(),
            id: ::std::string::String::new(),
            threshold: ::std::option::Option::None,
            timeout: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateBucketSchema {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateBucketSchema").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateBucketSchema {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateBucketSchema {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:DeleteBucketSchema)
pub struct DeleteBucketSchema {
    // message fields
    // @@protoc_insertion_point(field:DeleteBucketSchema.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:DeleteBucketSchema.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:DeleteBucketSchema.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteBucketSchema {
    fn default() -> &'a DeleteBucketSchema {
        <DeleteBucketSchema as ::protobuf::Message>::default_instance()
    }
}

impl DeleteBucketSchema {
    pub fn new() -> DeleteBucketSchema {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "domain",
            |m: &DeleteBucketSchema| { &m.domain },
            |m: &mut DeleteBucketSchema| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &DeleteBucketSchema| { &m.id },
            |m: &mut DeleteBucketSchema| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteBucketSchema>(
            "DeleteBucketSchema",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteBucketSchema {
    const NAME: &'static str = "DeleteBucketSchema";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.domain = is.read_string()?;
                },
                18 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteBucketSchema {
        DeleteBucketSchema::new()
    }

    fn clear(&mut self) {
        self.domain.clear();
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteBucketSchema {
        static instance: DeleteBucketSchema = DeleteBucketSchema {
            domain: ::std::string::String::new(),
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteBucketSchema {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteBucketSchema").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteBucketSchema {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteBucketSchema {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rbuckets.proto\")\n\rQueryResponse\x12\x18\n\x07success\x18\x01\x20\
    \x01(\x08R\x07success\"q\n\x0fNewBucketSchema\x12\x16\n\x06domain\x18\
    \x01\x20\x01(\tR\x06domain\x12\x0e\n\x02id\x18\x02\x20\x01(\tR\x02id\x12\
    \x1c\n\tthreshold\x18\x03\x20\x01(\x05R\tthreshold\x12\x18\n\x07timeout\
    \x18\x04\x20\x01(\x05R\x07timeout\"\x98\x01\n\x12UpdateBucketSchema\x12\
    \x16\n\x06domain\x18\x01\x20\x01(\tR\x06domain\x12\x0e\n\x02id\x18\x02\
    \x20\x01(\tR\x02id\x12!\n\tthreshold\x18\x03\x20\x01(\x05H\0R\tthreshold\
    \x88\x01\x01\x12\x1d\n\x07timeout\x18\x04\x20\x01(\x05H\x01R\x07timeout\
    \x88\x01\x01B\x0c\n\n_thresholdB\n\n\x08_timeout\"<\n\x12DeleteBucketSch\
    ema\x12\x16\n\x06domain\x18\x01\x20\x01(\tR\x06domain\x12\x0e\n\x02id\
    \x18\x02\x20\x01(\tR\x02id2\xa2\x01\n\x07Buckets\x12-\n\tNewBucket\x12\
    \x10.NewBucketSchema\x1a\x0e.QueryResponse\x123\n\x0cUpdateBucket\x12\
    \x13.UpdateBucketSchema\x1a\x0e.QueryResponse\x123\n\x0cDeleteBucket\x12\
    \x13.DeleteBucketSchema\x1a\x0e.QueryResponseJ\xa8\x07\n\x06\x12\x04\0\0\
    \x1f\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x06\0\x12\x04\x02\0\
    \x06\x01\n\n\n\x03\x06\0\x01\x12\x03\x02\x08\x0f\n\x0b\n\x04\x06\0\x02\0\
    \x12\x03\x03\x029\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x03\x06\x0f\n\x0c\
    \n\x05\x06\0\x02\0\x02\x12\x03\x03\x10\x1f\n\x0c\n\x05\x06\0\x02\0\x03\
    \x12\x03\x03*7\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x04\x02?\n\x0c\n\x05\
    \x06\0\x02\x01\x01\x12\x03\x04\x06\x12\n\x0c\n\x05\x06\0\x02\x01\x02\x12\
    \x03\x04\x13%\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x040=\n\x0b\n\x04\
    \x06\0\x02\x02\x12\x03\x05\x02?\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\
    \x05\x06\x12\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x05\x13%\n\x0c\n\x05\
    \x06\0\x02\x02\x03\x12\x03\x050=\n\n\n\x02\x04\0\x12\x04\x08\0\n\x01\n\n\
    \n\x03\x04\0\x01\x12\x03\x08\x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\x03\t\
    \x02\x13\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\t\x02\x06\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\t\x07\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x11\
    \x12\n\n\n\x02\x04\x01\x12\x04\x0c\0\x12\x01\n\n\n\x03\x04\x01\x01\x12\
    \x03\x0c\x08\x17\n\x0b\n\x04\x04\x01\x02\0\x12\x03\r\x02\x14\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03\r\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\r\t\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\r\x12\x13\n\x0b\n\x04\
    \x04\x01\x02\x01\x12\x03\x0e\x02\x10\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\
    \x03\x0e\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0e\t\x0b\n\x0c\
    \n\x05\x04\x01\x02\x01\x03\x12\x03\x0e\x0e\x0f\n\x0b\n\x04\x04\x01\x02\
    \x02\x12\x03\x10\x02\x16\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x10\x02\
    \x07\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x10\x08\x11\n\x0c\n\x05\x04\
    \x01\x02\x02\x03\x12\x03\x10\x14\x15\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\
    \x11\x02\x14\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x11\x02\x07\n\x0c\n\
    \x05\x04\x01\x02\x03\x01\x12\x03\x11\x08\x0f\n\x0c\n\x05\x04\x01\x02\x03\
    \x03\x12\x03\x11\x12\x13\n\n\n\x02\x04\x02\x12\x04\x14\0\x1a\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03\x14\x08\x1a\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x15\x02\x14\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x15\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x15\t\x0f\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x15\x12\x13\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x16\x02\x10\n\
    \x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\x02\
    \x02\x01\x01\x12\x03\x16\t\x0b\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\
    \x16\x0e\x0f\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x18\x02\x1f\n\x0c\n\x05\
    \x04\x02\x02\x02\x04\x12\x03\x18\x02\n\n\x0c\n\x05\x04\x02\x02\x02\x05\
    \x12\x03\x18\x0b\x10\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x18\x11\x1a\
    \n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x18\x1d\x1e\n\x0b\n\x04\x04\x02\
    \x02\x03\x12\x03\x19\x02\x1d\n\x0c\n\x05\x04\x02\x02\x03\x04\x12\x03\x19\
    \x02\n\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x19\x0b\x10\n\x0c\n\x05\
    \x04\x02\x02\x03\x01\x12\x03\x19\x11\x18\n\x0c\n\x05\x04\x02\x02\x03\x03\
    \x12\x03\x19\x1b\x1c\n\n\n\x02\x04\x03\x12\x04\x1c\0\x1f\x01\n\n\n\x03\
    \x04\x03\x01\x12\x03\x1c\x08\x1a\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x1d\
    \x02\x14\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1d\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03\x1d\t\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03\x1d\x12\x13\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x1e\x02\x10\n\x0c\n\
    \x05\x04\x03\x02\x01\x05\x12\x03\x1e\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03\x1e\t\x0b\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1e\x0e\
    \x0fb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(QueryResponse::generated_message_descriptor_data());
            messages.push(NewBucketSchema::generated_message_descriptor_data());
            messages.push(UpdateBucketSchema::generated_message_descriptor_data());
            messages.push(DeleteBucketSchema::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

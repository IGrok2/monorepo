// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `internal_settings.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:QueryResponse)
pub struct QueryResponse {
    // message fields
    // @@protoc_insertion_point(field:QueryResponse.success)
    pub success: bool,
    // special fields
    // @@protoc_insertion_point(special_field:QueryResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryResponse {
    fn default() -> &'a QueryResponse {
        <QueryResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryResponse {
    pub fn new() -> QueryResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "success",
            |m: &QueryResponse| { &m.success },
            |m: &mut QueryResponse| { &mut m.success },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryResponse>(
            "QueryResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryResponse {
    const NAME: &'static str = "QueryResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryResponse {
        QueryResponse::new()
    }

    fn clear(&mut self) {
        self.success = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryResponse {
        static instance: QueryResponse = QueryResponse {
            success: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:InternalSetting)
pub struct InternalSetting {
    // message fields
    // @@protoc_insertion_point(field:InternalSetting.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:InternalSetting.can_cache)
    pub can_cache: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:InternalSetting.domain_blocked)
    pub domain_blocked: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:InternalSetting.request_timeout)
    pub request_timeout: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:InternalSetting.threat_score_threshold)
    pub threat_score_threshold: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:InternalSetting.expected_passed)
    pub expected_passed: ::std::option::Option<i32>,
    ///  bytes / 1000
    // @@protoc_insertion_point(field:InternalSetting.cache_file_max)
    pub cache_file_max: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:InternalSetting.total_cache_limit)
    pub total_cache_limit: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:InternalSetting.allowed_open_conns)
    pub allowed_open_conns: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:InternalSetting.server_messages_threshold)
    pub server_messages_threshold: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:InternalSetting.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InternalSetting {
    fn default() -> &'a InternalSetting {
        <InternalSetting as ::protobuf::Message>::default_instance()
    }
}

impl InternalSetting {
    pub fn new() -> InternalSetting {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "domain",
            |m: &InternalSetting| { &m.domain },
            |m: &mut InternalSetting| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "can_cache",
            |m: &InternalSetting| { &m.can_cache },
            |m: &mut InternalSetting| { &mut m.can_cache },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "domain_blocked",
            |m: &InternalSetting| { &m.domain_blocked },
            |m: &mut InternalSetting| { &mut m.domain_blocked },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "request_timeout",
            |m: &InternalSetting| { &m.request_timeout },
            |m: &mut InternalSetting| { &mut m.request_timeout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "threat_score_threshold",
            |m: &InternalSetting| { &m.threat_score_threshold },
            |m: &mut InternalSetting| { &mut m.threat_score_threshold },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "expected_passed",
            |m: &InternalSetting| { &m.expected_passed },
            |m: &mut InternalSetting| { &mut m.expected_passed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cache_file_max",
            |m: &InternalSetting| { &m.cache_file_max },
            |m: &mut InternalSetting| { &mut m.cache_file_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "total_cache_limit",
            |m: &InternalSetting| { &m.total_cache_limit },
            |m: &mut InternalSetting| { &mut m.total_cache_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "allowed_open_conns",
            |m: &InternalSetting| { &m.allowed_open_conns },
            |m: &mut InternalSetting| { &mut m.allowed_open_conns },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_messages_threshold",
            |m: &InternalSetting| { &m.server_messages_threshold },
            |m: &mut InternalSetting| { &mut m.server_messages_threshold },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InternalSetting>(
            "InternalSetting",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InternalSetting {
    const NAME: &'static str = "InternalSetting";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.domain = is.read_string()?;
                },
                16 => {
                    self.can_cache = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.domain_blocked = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.request_timeout = ::std::option::Option::Some(is.read_sint32()?);
                },
                40 => {
                    self.threat_score_threshold = ::std::option::Option::Some(is.read_sint32()?);
                },
                48 => {
                    self.expected_passed = ::std::option::Option::Some(is.read_sint32()?);
                },
                56 => {
                    self.cache_file_max = ::std::option::Option::Some(is.read_sint32()?);
                },
                64 => {
                    self.total_cache_limit = ::std::option::Option::Some(is.read_sint32()?);
                },
                72 => {
                    self.allowed_open_conns = ::std::option::Option::Some(is.read_sint32()?);
                },
                80 => {
                    self.server_messages_threshold = ::std::option::Option::Some(is.read_sint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if let Some(v) = self.can_cache {
            my_size += 1 + 1;
        }
        if let Some(v) = self.domain_blocked {
            my_size += 1 + 1;
        }
        if let Some(v) = self.request_timeout {
            my_size += ::protobuf::rt::sint32_size(4, v);
        }
        if let Some(v) = self.threat_score_threshold {
            my_size += ::protobuf::rt::sint32_size(5, v);
        }
        if let Some(v) = self.expected_passed {
            my_size += ::protobuf::rt::sint32_size(6, v);
        }
        if let Some(v) = self.cache_file_max {
            my_size += ::protobuf::rt::sint32_size(7, v);
        }
        if let Some(v) = self.total_cache_limit {
            my_size += ::protobuf::rt::sint32_size(8, v);
        }
        if let Some(v) = self.allowed_open_conns {
            my_size += ::protobuf::rt::sint32_size(9, v);
        }
        if let Some(v) = self.server_messages_threshold {
            my_size += ::protobuf::rt::sint32_size(10, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if let Some(v) = self.can_cache {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.domain_blocked {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.request_timeout {
            os.write_sint32(4, v)?;
        }
        if let Some(v) = self.threat_score_threshold {
            os.write_sint32(5, v)?;
        }
        if let Some(v) = self.expected_passed {
            os.write_sint32(6, v)?;
        }
        if let Some(v) = self.cache_file_max {
            os.write_sint32(7, v)?;
        }
        if let Some(v) = self.total_cache_limit {
            os.write_sint32(8, v)?;
        }
        if let Some(v) = self.allowed_open_conns {
            os.write_sint32(9, v)?;
        }
        if let Some(v) = self.server_messages_threshold {
            os.write_sint32(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InternalSetting {
        InternalSetting::new()
    }

    fn clear(&mut self) {
        self.domain.clear();
        self.can_cache = ::std::option::Option::None;
        self.domain_blocked = ::std::option::Option::None;
        self.request_timeout = ::std::option::Option::None;
        self.threat_score_threshold = ::std::option::Option::None;
        self.expected_passed = ::std::option::Option::None;
        self.cache_file_max = ::std::option::Option::None;
        self.total_cache_limit = ::std::option::Option::None;
        self.allowed_open_conns = ::std::option::Option::None;
        self.server_messages_threshold = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InternalSetting {
        static instance: InternalSetting = InternalSetting {
            domain: ::std::string::String::new(),
            can_cache: ::std::option::Option::None,
            domain_blocked: ::std::option::Option::None,
            request_timeout: ::std::option::Option::None,
            threat_score_threshold: ::std::option::Option::None,
            expected_passed: ::std::option::Option::None,
            cache_file_max: ::std::option::Option::None,
            total_cache_limit: ::std::option::Option::None,
            allowed_open_conns: ::std::option::Option::None,
            server_messages_threshold: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InternalSetting {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InternalSetting").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InternalSetting {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InternalSetting {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17internal_settings.proto\")\n\rQueryResponse\x12\x18\n\x07success\
    \x18\x01\x20\x01(\x08R\x07success\"\xa0\x05\n\x0fInternalSetting\x12\x16\
    \n\x06domain\x18\x01\x20\x01(\tR\x06domain\x12\x20\n\tcan_cache\x18\x02\
    \x20\x01(\x08H\0R\x08canCache\x88\x01\x01\x12*\n\x0edomain_blocked\x18\
    \x03\x20\x01(\x08H\x01R\rdomainBlocked\x88\x01\x01\x12,\n\x0frequest_tim\
    eout\x18\x04\x20\x01(\x11H\x02R\x0erequestTimeout\x88\x01\x01\x129\n\x16\
    threat_score_threshold\x18\x05\x20\x01(\x11H\x03R\x14threatScoreThreshol\
    d\x88\x01\x01\x12,\n\x0fexpected_passed\x18\x06\x20\x01(\x11H\x04R\x0eex\
    pectedPassed\x88\x01\x01\x12)\n\x0ecache_file_max\x18\x07\x20\x01(\x11H\
    \x05R\x0ccacheFileMax\x88\x01\x01\x12/\n\x11total_cache_limit\x18\x08\
    \x20\x01(\x11H\x06R\x0ftotalCacheLimit\x88\x01\x01\x121\n\x12allowed_ope\
    n_conns\x18\t\x20\x01(\x11H\x07R\x10allowedOpenConns\x88\x01\x01\x12?\n\
    \x19server_messages_threshold\x18\n\x20\x01(\x11H\x08R\x17serverMessages\
    Threshold\x88\x01\x01B\x0c\n\n_can_cacheB\x11\n\x0f_domain_blockedB\x12\
    \n\x10_request_timeoutB\x19\n\x17_threat_score_thresholdB\x12\n\x10_expe\
    cted_passedB\x11\n\x0f_cache_file_maxB\x14\n\x12_total_cache_limitB\x15\
    \n\x13_allowed_open_connsB\x1c\n\x1a_server_messages_threshold2X\n\x1aIn\
    ternalSettingsManagement\x12:\n\x16UpdateInternalSettings\x12\x10.Intern\
    alSetting\x1a\x0e.QueryResponseJ\xa2\x07\n\x06\x12\x04\0\0\x17\x01\n\x08\
    \n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x06\0\x12\x04\x02\0\x04\x01\n\n\n\
    \x03\x06\0\x01\x12\x03\x02\x08\"\n\x0b\n\x04\x06\0\x02\0\x12\x03\x03\x02\
    F\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x03\x06\x1c\n\x0c\n\x05\x06\0\x02\
    \0\x02\x12\x03\x03\x1d,\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x037D\n\n\n\
    \x02\x04\0\x12\x04\x06\0\x08\x01\n\n\n\x03\x04\0\x01\x12\x03\x06\x08\x15\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x02\x13\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x07\x02\x06\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\x07\x0e\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x07\x11\x12\n\n\n\x02\x04\x01\x12\x04\
    \n\0\x17\x01\n\n\n\x03\x04\x01\x01\x12\x03\n\x08\x17\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x03\x0b\x02\x14\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0b\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0b\t\x0f\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\x0b\x12\x13\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0c\
    \x02\x1e\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03\x0c\x02\n\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\x0c\x0b\x0f\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x0c\x10\x19\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0c\x1c\x1d\
    \n\x0b\n\x04\x04\x01\x02\x02\x12\x03\r\x02#\n\x0c\n\x05\x04\x01\x02\x02\
    \x04\x12\x03\r\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\r\x0b\x0f\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\r\x10\x1e\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03\r!\"\n\x1f\n\x04\x04\x01\x02\x03\x12\x03\x0e\x02&\"\x12\
    \x20uploads\x20and\x20such\n\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\x03\x0e\
    \x02\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x0e\x0b\x11\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x03\x0e\x12!\n\x0c\n\x05\x04\x01\x02\x03\x03\
    \x12\x03\x0e$%\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x0f\x02-\n\x0c\n\x05\
    \x04\x01\x02\x04\x04\x12\x03\x0f\x02\n\n\x0c\n\x05\x04\x01\x02\x04\x05\
    \x12\x03\x0f\x0b\x11\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x0f\x12(\n\
    \x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x0f+,\n\x0b\n\x04\x04\x01\x02\x05\
    \x12\x03\x10\x02&\n\x0c\n\x05\x04\x01\x02\x05\x04\x12\x03\x10\x02\n\n\
    \x0c\n\x05\x04\x01\x02\x05\x05\x12\x03\x10\x0b\x11\n\x0c\n\x05\x04\x01\
    \x02\x05\x01\x12\x03\x10\x12!\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\
    \x10$%\n\x1b\n\x04\x04\x01\x02\x06\x12\x03\x12\x02%\x1a\x0e\x20bytes\x20\
    /\x201000\n\n\x0c\n\x05\x04\x01\x02\x06\x04\x12\x03\x12\x02\n\n\x0c\n\
    \x05\x04\x01\x02\x06\x05\x12\x03\x12\x0b\x11\n\x0c\n\x05\x04\x01\x02\x06\
    \x01\x12\x03\x12\x12\x20\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03\x12#$\n\
    \x0b\n\x04\x04\x01\x02\x07\x12\x03\x13\x02(\n\x0c\n\x05\x04\x01\x02\x07\
    \x04\x12\x03\x13\x02\n\n\x0c\n\x05\x04\x01\x02\x07\x05\x12\x03\x13\x0b\
    \x11\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\x03\x13\x12#\n\x0c\n\x05\x04\
    \x01\x02\x07\x03\x12\x03\x13&'\n\x0b\n\x04\x04\x01\x02\x08\x12\x03\x15\
    \x02)\n\x0c\n\x05\x04\x01\x02\x08\x04\x12\x03\x15\x02\n\n\x0c\n\x05\x04\
    \x01\x02\x08\x05\x12\x03\x15\x0b\x11\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\
    \x03\x15\x12$\n\x0c\n\x05\x04\x01\x02\x08\x03\x12\x03\x15'(\n\x1d\n\x04\
    \x04\x01\x02\t\x12\x03\x16\x021\"\x10\x20ratelimit\x20serv\n\n\x0c\n\x05\
    \x04\x01\x02\t\x04\x12\x03\x16\x02\n\n\x0c\n\x05\x04\x01\x02\t\x05\x12\
    \x03\x16\x0b\x11\n\x0c\n\x05\x04\x01\x02\t\x01\x12\x03\x16\x12+\n\x0c\n\
    \x05\x04\x01\x02\t\x03\x12\x03\x16.0b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(QueryResponse::generated_message_descriptor_data());
            messages.push(InternalSetting::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

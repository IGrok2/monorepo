// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:QueryResponse)
pub struct QueryResponse {
    // message fields
    // @@protoc_insertion_point(field:QueryResponse.success)
    pub success: bool,
    // special fields
    // @@protoc_insertion_point(special_field:QueryResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryResponse {
    fn default() -> &'a QueryResponse {
        <QueryResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryResponse {
    pub fn new() -> QueryResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "success",
            |m: &QueryResponse| { &m.success },
            |m: &mut QueryResponse| { &mut m.success },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryResponse>(
            "QueryResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryResponse {
    const NAME: &'static str = "QueryResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryResponse {
        QueryResponse::new()
    }

    fn clear(&mut self) {
        self.success = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryResponse {
        static instance: QueryResponse = QueryResponse {
            success: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:EnableStatusUpdate)
pub struct EnableStatusUpdate {
    // message fields
    // @@protoc_insertion_point(field:EnableStatusUpdate.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:EnableStatusUpdate.enabled)
    pub enabled: bool,
    // special fields
    // @@protoc_insertion_point(special_field:EnableStatusUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EnableStatusUpdate {
    fn default() -> &'a EnableStatusUpdate {
        <EnableStatusUpdate as ::protobuf::Message>::default_instance()
    }
}

impl EnableStatusUpdate {
    pub fn new() -> EnableStatusUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "domain",
            |m: &EnableStatusUpdate| { &m.domain },
            |m: &mut EnableStatusUpdate| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enabled",
            |m: &EnableStatusUpdate| { &m.enabled },
            |m: &mut EnableStatusUpdate| { &mut m.enabled },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EnableStatusUpdate>(
            "EnableStatusUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EnableStatusUpdate {
    const NAME: &'static str = "EnableStatusUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.domain = is.read_string()?;
                },
                16 => {
                    self.enabled = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if self.enabled != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if self.enabled != false {
            os.write_bool(2, self.enabled)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EnableStatusUpdate {
        EnableStatusUpdate::new()
    }

    fn clear(&mut self) {
        self.domain.clear();
        self.enabled = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EnableStatusUpdate {
        static instance: EnableStatusUpdate = EnableStatusUpdate {
            domain: ::std::string::String::new(),
            enabled: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EnableStatusUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EnableStatusUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EnableStatusUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnableStatusUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:RuleSettingSchema)
pub struct RuleSettingSchema {
    // message fields
    // @@protoc_insertion_point(field:RuleSettingSchema.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:RuleSettingSchema.path)
    pub path: ::std::string::String,
    ///  following whitelist factors are optional
    // @@protoc_insertion_point(field:RuleSettingSchema.kv_whitelist_factor)
    pub kv_whitelist_factor: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // @@protoc_insertion_point(field:RuleSettingSchema.ips)
    pub ips: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:RuleSettingSchema.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RuleSettingSchema {
    fn default() -> &'a RuleSettingSchema {
        <RuleSettingSchema as ::protobuf::Message>::default_instance()
    }
}

impl RuleSettingSchema {
    pub fn new() -> RuleSettingSchema {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "domain",
            |m: &RuleSettingSchema| { &m.domain },
            |m: &mut RuleSettingSchema| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &RuleSettingSchema| { &m.path },
            |m: &mut RuleSettingSchema| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "kv_whitelist_factor",
            |m: &RuleSettingSchema| { &m.kv_whitelist_factor },
            |m: &mut RuleSettingSchema| { &mut m.kv_whitelist_factor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ips",
            |m: &RuleSettingSchema| { &m.ips },
            |m: &mut RuleSettingSchema| { &mut m.ips },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RuleSettingSchema>(
            "RuleSettingSchema",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RuleSettingSchema {
    const NAME: &'static str = "RuleSettingSchema";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.domain = is.read_string()?;
                },
                18 => {
                    self.path = is.read_string()?;
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.kv_whitelist_factor.insert(key, value);
                },
                34 => {
                    self.ips.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        for (k, v) in &self.kv_whitelist_factor {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        for value in &self.ips {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        for (k, v) in &self.kv_whitelist_factor {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        for v in &self.ips {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RuleSettingSchema {
        RuleSettingSchema::new()
    }

    fn clear(&mut self) {
        self.domain.clear();
        self.path.clear();
        self.kv_whitelist_factor.clear();
        self.ips.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RuleSettingSchema {
        static instance: ::protobuf::rt::Lazy<RuleSettingSchema> = ::protobuf::rt::Lazy::new();
        instance.get(RuleSettingSchema::new)
    }
}

impl ::protobuf::MessageFull for RuleSettingSchema {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RuleSettingSchema").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RuleSettingSchema {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RuleSettingSchema {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:NewRule)
pub struct NewRule {
    // message fields
    // @@protoc_insertion_point(field:NewRule.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:NewRule.base_path)
    pub base_path: ::std::string::String,
    // @@protoc_insertion_point(field:NewRule.position)
    pub position: i32,
    // @@protoc_insertion_point(field:NewRule.path)
    pub path: ::std::string::String,
    // @@protoc_insertion_point(field:NewRule.trigger_type)
    pub trigger_type: ::std::string::String,
    // @@protoc_insertion_point(field:NewRule.allow_query_string)
    pub allow_query_string: bool,
    ///  you could have both of the following!
    // @@protoc_insertion_point(field:NewRule.ws_methods)
    pub ws_methods: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:NewRule.web_methods)
    pub web_methods: ::std::vec::Vec<::std::string::String>,
    ///  if the rule matches, it's now technically "allowed," but we allow the user to do more here
    // @@protoc_insertion_point(field:NewRule.ratelimit_bucket)
    pub ratelimit_bucket: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:NewRule.cache_level)
    pub cache_level: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:NewRule.cache_level_ttl)
    pub cache_level_ttl: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:NewRule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NewRule {
    fn default() -> &'a NewRule {
        <NewRule as ::protobuf::Message>::default_instance()
    }
}

impl NewRule {
    pub fn new() -> NewRule {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "domain",
            |m: &NewRule| { &m.domain },
            |m: &mut NewRule| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "base_path",
            |m: &NewRule| { &m.base_path },
            |m: &mut NewRule| { &mut m.base_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "position",
            |m: &NewRule| { &m.position },
            |m: &mut NewRule| { &mut m.position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &NewRule| { &m.path },
            |m: &mut NewRule| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "trigger_type",
            |m: &NewRule| { &m.trigger_type },
            |m: &mut NewRule| { &mut m.trigger_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "allow_query_string",
            |m: &NewRule| { &m.allow_query_string },
            |m: &mut NewRule| { &mut m.allow_query_string },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ws_methods",
            |m: &NewRule| { &m.ws_methods },
            |m: &mut NewRule| { &mut m.ws_methods },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "web_methods",
            |m: &NewRule| { &m.web_methods },
            |m: &mut NewRule| { &mut m.web_methods },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ratelimit_bucket",
            |m: &NewRule| { &m.ratelimit_bucket },
            |m: &mut NewRule| { &mut m.ratelimit_bucket },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cache_level",
            |m: &NewRule| { &m.cache_level },
            |m: &mut NewRule| { &mut m.cache_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cache_level_ttl",
            |m: &NewRule| { &m.cache_level_ttl },
            |m: &mut NewRule| { &mut m.cache_level_ttl },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NewRule>(
            "NewRule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NewRule {
    const NAME: &'static str = "NewRule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.domain = is.read_string()?;
                },
                18 => {
                    self.base_path = is.read_string()?;
                },
                24 => {
                    self.position = is.read_int32()?;
                },
                34 => {
                    self.path = is.read_string()?;
                },
                42 => {
                    self.trigger_type = is.read_string()?;
                },
                48 => {
                    self.allow_query_string = is.read_bool()?;
                },
                58 => {
                    self.ws_methods.push(is.read_string()?);
                },
                66 => {
                    self.web_methods.push(is.read_string()?);
                },
                74 => {
                    self.ratelimit_bucket = ::std::option::Option::Some(is.read_string()?);
                },
                82 => {
                    self.cache_level = ::std::option::Option::Some(is.read_string()?);
                },
                88 => {
                    self.cache_level_ttl = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if !self.base_path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.base_path);
        }
        if self.position != 0 {
            my_size += ::protobuf::rt::int32_size(3, self.position);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.path);
        }
        if !self.trigger_type.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.trigger_type);
        }
        if self.allow_query_string != false {
            my_size += 1 + 1;
        }
        for value in &self.ws_methods {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        for value in &self.web_methods {
            my_size += ::protobuf::rt::string_size(8, &value);
        };
        if let Some(v) = self.ratelimit_bucket.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.cache_level.as_ref() {
            my_size += ::protobuf::rt::string_size(10, &v);
        }
        if let Some(v) = self.cache_level_ttl {
            my_size += ::protobuf::rt::int32_size(11, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if !self.base_path.is_empty() {
            os.write_string(2, &self.base_path)?;
        }
        if self.position != 0 {
            os.write_int32(3, self.position)?;
        }
        if !self.path.is_empty() {
            os.write_string(4, &self.path)?;
        }
        if !self.trigger_type.is_empty() {
            os.write_string(5, &self.trigger_type)?;
        }
        if self.allow_query_string != false {
            os.write_bool(6, self.allow_query_string)?;
        }
        for v in &self.ws_methods {
            os.write_string(7, &v)?;
        };
        for v in &self.web_methods {
            os.write_string(8, &v)?;
        };
        if let Some(v) = self.ratelimit_bucket.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.cache_level.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.cache_level_ttl {
            os.write_int32(11, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NewRule {
        NewRule::new()
    }

    fn clear(&mut self) {
        self.domain.clear();
        self.base_path.clear();
        self.position = 0;
        self.path.clear();
        self.trigger_type.clear();
        self.allow_query_string = false;
        self.ws_methods.clear();
        self.web_methods.clear();
        self.ratelimit_bucket = ::std::option::Option::None;
        self.cache_level = ::std::option::Option::None;
        self.cache_level_ttl = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NewRule {
        static instance: NewRule = NewRule {
            domain: ::std::string::String::new(),
            base_path: ::std::string::String::new(),
            position: 0,
            path: ::std::string::String::new(),
            trigger_type: ::std::string::String::new(),
            allow_query_string: false,
            ws_methods: ::std::vec::Vec::new(),
            web_methods: ::std::vec::Vec::new(),
            ratelimit_bucket: ::std::option::Option::None,
            cache_level: ::std::option::Option::None,
            cache_level_ttl: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NewRule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NewRule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NewRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NewRule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:UpdateRule)
pub struct UpdateRule {
    // message fields
    ///  required information!
    // @@protoc_insertion_point(field:UpdateRule.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:UpdateRule.base_path)
    pub base_path: ::std::string::String,
    // @@protoc_insertion_point(field:UpdateRule.path)
    pub path: ::std::string::String,
    ///  optionals (to modify)
    // @@protoc_insertion_point(field:UpdateRule.position)
    pub position: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:UpdateRule.trigger_type)
    pub trigger_type: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:UpdateRule.allow_query_string)
    pub allow_query_string: ::std::option::Option<bool>,
    ///  you could have both of the following!
    // @@protoc_insertion_point(field:UpdateRule.ws_methods)
    pub ws_methods: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:UpdateRule.web_methods)
    pub web_methods: ::std::vec::Vec<::std::string::String>,
    ///  if the rule matches, it's now technically "allowed," but we allow the user to do more here
    // @@protoc_insertion_point(field:UpdateRule.ratelimit_bucket)
    pub ratelimit_bucket: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:UpdateRule.cache_level)
    pub cache_level: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:UpdateRule.cache_level_ttl)
    pub cache_level_ttl: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:UpdateRule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateRule {
    fn default() -> &'a UpdateRule {
        <UpdateRule as ::protobuf::Message>::default_instance()
    }
}

impl UpdateRule {
    pub fn new() -> UpdateRule {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "domain",
            |m: &UpdateRule| { &m.domain },
            |m: &mut UpdateRule| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "base_path",
            |m: &UpdateRule| { &m.base_path },
            |m: &mut UpdateRule| { &mut m.base_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &UpdateRule| { &m.path },
            |m: &mut UpdateRule| { &mut m.path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "position",
            |m: &UpdateRule| { &m.position },
            |m: &mut UpdateRule| { &mut m.position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "trigger_type",
            |m: &UpdateRule| { &m.trigger_type },
            |m: &mut UpdateRule| { &mut m.trigger_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "allow_query_string",
            |m: &UpdateRule| { &m.allow_query_string },
            |m: &mut UpdateRule| { &mut m.allow_query_string },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ws_methods",
            |m: &UpdateRule| { &m.ws_methods },
            |m: &mut UpdateRule| { &mut m.ws_methods },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "web_methods",
            |m: &UpdateRule| { &m.web_methods },
            |m: &mut UpdateRule| { &mut m.web_methods },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ratelimit_bucket",
            |m: &UpdateRule| { &m.ratelimit_bucket },
            |m: &mut UpdateRule| { &mut m.ratelimit_bucket },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cache_level",
            |m: &UpdateRule| { &m.cache_level },
            |m: &mut UpdateRule| { &mut m.cache_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cache_level_ttl",
            |m: &UpdateRule| { &m.cache_level_ttl },
            |m: &mut UpdateRule| { &mut m.cache_level_ttl },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateRule>(
            "UpdateRule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateRule {
    const NAME: &'static str = "UpdateRule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.domain = is.read_string()?;
                },
                18 => {
                    self.base_path = is.read_string()?;
                },
                26 => {
                    self.path = is.read_string()?;
                },
                32 => {
                    self.position = ::std::option::Option::Some(is.read_int32()?);
                },
                42 => {
                    self.trigger_type = ::std::option::Option::Some(is.read_string()?);
                },
                48 => {
                    self.allow_query_string = ::std::option::Option::Some(is.read_bool()?);
                },
                58 => {
                    self.ws_methods.push(is.read_string()?);
                },
                66 => {
                    self.web_methods.push(is.read_string()?);
                },
                74 => {
                    self.ratelimit_bucket = ::std::option::Option::Some(is.read_string()?);
                },
                82 => {
                    self.cache_level = ::std::option::Option::Some(is.read_string()?);
                },
                88 => {
                    self.cache_level_ttl = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if !self.base_path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.base_path);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.path);
        }
        if let Some(v) = self.position {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        if let Some(v) = self.trigger_type.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.allow_query_string {
            my_size += 1 + 1;
        }
        for value in &self.ws_methods {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        for value in &self.web_methods {
            my_size += ::protobuf::rt::string_size(8, &value);
        };
        if let Some(v) = self.ratelimit_bucket.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(v) = self.cache_level.as_ref() {
            my_size += ::protobuf::rt::string_size(10, &v);
        }
        if let Some(v) = self.cache_level_ttl {
            my_size += ::protobuf::rt::int32_size(11, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if !self.base_path.is_empty() {
            os.write_string(2, &self.base_path)?;
        }
        if !self.path.is_empty() {
            os.write_string(3, &self.path)?;
        }
        if let Some(v) = self.position {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.trigger_type.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.allow_query_string {
            os.write_bool(6, v)?;
        }
        for v in &self.ws_methods {
            os.write_string(7, &v)?;
        };
        for v in &self.web_methods {
            os.write_string(8, &v)?;
        };
        if let Some(v) = self.ratelimit_bucket.as_ref() {
            os.write_string(9, v)?;
        }
        if let Some(v) = self.cache_level.as_ref() {
            os.write_string(10, v)?;
        }
        if let Some(v) = self.cache_level_ttl {
            os.write_int32(11, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateRule {
        UpdateRule::new()
    }

    fn clear(&mut self) {
        self.domain.clear();
        self.base_path.clear();
        self.path.clear();
        self.position = ::std::option::Option::None;
        self.trigger_type = ::std::option::Option::None;
        self.allow_query_string = ::std::option::Option::None;
        self.ws_methods.clear();
        self.web_methods.clear();
        self.ratelimit_bucket = ::std::option::Option::None;
        self.cache_level = ::std::option::Option::None;
        self.cache_level_ttl = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateRule {
        static instance: UpdateRule = UpdateRule {
            domain: ::std::string::String::new(),
            base_path: ::std::string::String::new(),
            path: ::std::string::String::new(),
            position: ::std::option::Option::None,
            trigger_type: ::std::option::Option::None,
            allow_query_string: ::std::option::Option::None,
            ws_methods: ::std::vec::Vec::new(),
            web_methods: ::std::vec::Vec::new(),
            ratelimit_bucket: ::std::option::Option::None,
            cache_level: ::std::option::Option::None,
            cache_level_ttl: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateRule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateRule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateRule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:DeleteRule)
pub struct DeleteRule {
    // message fields
    ///  required information!
    // @@protoc_insertion_point(field:DeleteRule.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:DeleteRule.base_path)
    pub base_path: ::std::string::String,
    // @@protoc_insertion_point(field:DeleteRule.path)
    pub path: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:DeleteRule.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteRule {
    fn default() -> &'a DeleteRule {
        <DeleteRule as ::protobuf::Message>::default_instance()
    }
}

impl DeleteRule {
    pub fn new() -> DeleteRule {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "domain",
            |m: &DeleteRule| { &m.domain },
            |m: &mut DeleteRule| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "base_path",
            |m: &DeleteRule| { &m.base_path },
            |m: &mut DeleteRule| { &mut m.base_path },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &DeleteRule| { &m.path },
            |m: &mut DeleteRule| { &mut m.path },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteRule>(
            "DeleteRule",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteRule {
    const NAME: &'static str = "DeleteRule";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.domain = is.read_string()?;
                },
                18 => {
                    self.base_path = is.read_string()?;
                },
                26 => {
                    self.path = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if !self.base_path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.base_path);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if !self.base_path.is_empty() {
            os.write_string(2, &self.base_path)?;
        }
        if !self.path.is_empty() {
            os.write_string(3, &self.path)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteRule {
        DeleteRule::new()
    }

    fn clear(&mut self) {
        self.domain.clear();
        self.base_path.clear();
        self.path.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteRule {
        static instance: DeleteRule = DeleteRule {
            domain: ::std::string::String::new(),
            base_path: ::std::string::String::new(),
            path: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteRule {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteRule").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteRule {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tapi.proto\")\n\rQueryResponse\x12\x18\n\x07success\x18\x01\x20\x01(\
    \x08R\x07success\"F\n\x12EnableStatusUpdate\x12\x16\n\x06domain\x18\x01\
    \x20\x01(\tR\x06domain\x12\x18\n\x07enabled\x18\x02\x20\x01(\x08R\x07ena\
    bled\"\xf2\x01\n\x11RuleSettingSchema\x12\x16\n\x06domain\x18\x01\x20\
    \x01(\tR\x06domain\x12\x12\n\x04path\x18\x02\x20\x01(\tR\x04path\x12Y\n\
    \x13kv_whitelist_factor\x18\x03\x20\x03(\x0b2).RuleSettingSchema.KvWhite\
    listFactorEntryR\x11kvWhitelistFactor\x12\x10\n\x03ips\x18\x04\x20\x03(\
    \tR\x03ips\x1aD\n\x16KvWhitelistFactorEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\
    \x01\"\xbb\x03\n\x07NewRule\x12\x16\n\x06domain\x18\x01\x20\x01(\tR\x06d\
    omain\x12\x1b\n\tbase_path\x18\x02\x20\x01(\tR\x08basePath\x12\x1a\n\x08\
    position\x18\x03\x20\x01(\x05R\x08position\x12\x12\n\x04path\x18\x04\x20\
    \x01(\tR\x04path\x12!\n\x0ctrigger_type\x18\x05\x20\x01(\tR\x0btriggerTy\
    pe\x12,\n\x12allow_query_string\x18\x06\x20\x01(\x08R\x10allowQueryStrin\
    g\x12\x1d\n\nws_methods\x18\x07\x20\x03(\tR\twsMethods\x12\x1f\n\x0bweb_\
    methods\x18\x08\x20\x03(\tR\nwebMethods\x12.\n\x10ratelimit_bucket\x18\t\
    \x20\x01(\tH\0R\x0fratelimitBucket\x88\x01\x01\x12$\n\x0bcache_level\x18\
    \n\x20\x01(\tH\x01R\ncacheLevel\x88\x01\x01\x12+\n\x0fcache_level_ttl\
    \x18\x0b\x20\x01(\x05H\x02R\rcacheLevelTtl\x88\x01\x01B\x13\n\x11_rateli\
    mit_bucketB\x0e\n\x0c_cache_levelB\x12\n\x10_cache_level_ttl\"\x82\x04\n\
    \nUpdateRule\x12\x16\n\x06domain\x18\x01\x20\x01(\tR\x06domain\x12\x1b\n\
    \tbase_path\x18\x02\x20\x01(\tR\x08basePath\x12\x12\n\x04path\x18\x03\
    \x20\x01(\tR\x04path\x12\x1f\n\x08position\x18\x04\x20\x01(\x05H\0R\x08p\
    osition\x88\x01\x01\x12&\n\x0ctrigger_type\x18\x05\x20\x01(\tH\x01R\x0bt\
    riggerType\x88\x01\x01\x121\n\x12allow_query_string\x18\x06\x20\x01(\x08\
    H\x02R\x10allowQueryString\x88\x01\x01\x12\x1d\n\nws_methods\x18\x07\x20\
    \x03(\tR\twsMethods\x12\x1f\n\x0bweb_methods\x18\x08\x20\x03(\tR\nwebMet\
    hods\x12.\n\x10ratelimit_bucket\x18\t\x20\x01(\tH\x03R\x0fratelimitBucke\
    t\x88\x01\x01\x12$\n\x0bcache_level\x18\n\x20\x01(\tH\x04R\ncacheLevel\
    \x88\x01\x01\x12+\n\x0fcache_level_ttl\x18\x0b\x20\x01(\x05H\x05R\rcache\
    LevelTtl\x88\x01\x01B\x0b\n\t_positionB\x0f\n\r_trigger_typeB\x15\n\x13_\
    allow_query_stringB\x13\n\x11_ratelimit_bucketB\x0e\n\x0c_cache_levelB\
    \x12\n\x10_cache_level_ttl\"U\n\nDeleteRule\x12\x16\n\x06domain\x18\x01\
    \x20\x01(\tR\x06domain\x12\x1b\n\tbase_path\x18\x02\x20\x01(\tR\x08baseP\
    ath\x12\x12\n\x04path\x18\x03\x20\x01(\tR\x04path2\x81\x03\n\tApiEngine\
    \x129\n\x12ChangeEnableStatus\x12\x13.EnableStatusUpdate\x1a\x0e.QueryRe\
    sponse\x125\n\x0fAddRuleSettings\x12\x12.RuleSettingSchema\x1a\x0e.Query\
    Response\x128\n\x12UpdateRuleSettings\x12\x12.RuleSettingSchema\x1a\x0e.\
    QueryResponse\x128\n\x12DeleteRuleSettings\x12\x12.RuleSettingSchema\x1a\
    \x0e.QueryResponse\x12*\n\x0eAddRuleSetting\x12\x08.NewRule\x1a\x0e.Quer\
    yResponse\x120\n\x11UpdateRuleSetting\x12\x0b.UpdateRule\x1a\x0e.QueryRe\
    sponse\x120\n\x11DeleteRuleSetting\x12\x0b.DeleteRule\x1a\x0e.QueryRespo\
    nseJ\xec\x1d\n\x06\x12\x04\0\0F\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\
    \n\x02\x06\0\x12\x04\x02\0\x0c\x01\n\n\n\x03\x06\0\x01\x12\x03\x02\x08\
    \x11\n\x0b\n\x04\x06\0\x02\0\x12\x03\x03\x02E\n\x0c\n\x05\x06\0\x02\0\
    \x01\x12\x03\x03\x06\x18\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x03\x19+\n\
    \x0c\n\x05\x06\0\x02\0\x03\x12\x03\x036C\n\x0b\n\x04\x06\0\x02\x01\x12\
    \x03\x05\x02A\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x05\x06\x15\n\x0c\n\
    \x05\x06\0\x02\x01\x02\x12\x03\x05\x16'\n\x0c\n\x05\x06\0\x02\x01\x03\
    \x12\x03\x052?\n\x0b\n\x04\x06\0\x02\x02\x12\x03\x06\x02D\n\x0c\n\x05\
    \x06\0\x02\x02\x01\x12\x03\x06\x06\x18\n\x0c\n\x05\x06\0\x02\x02\x02\x12\
    \x03\x06\x19*\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x065B\n\x0b\n\x04\
    \x06\0\x02\x03\x12\x03\x07\x02D\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\
    \x07\x06\x18\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x07\x19*\n\x0c\n\x05\
    \x06\0\x02\x03\x03\x12\x03\x075B\n\x0b\n\x04\x06\0\x02\x04\x12\x03\t\x02\
    6\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\t\x06\x14\n\x0c\n\x05\x06\0\x02\
    \x04\x02\x12\x03\t\x15\x1c\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\t'4\n\
    \x0b\n\x04\x06\0\x02\x05\x12\x03\n\x02<\n\x0c\n\x05\x06\0\x02\x05\x01\
    \x12\x03\n\x06\x17\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03\n\x18\"\n\x0c\n\
    \x05\x06\0\x02\x05\x03\x12\x03\n-:\n\x0b\n\x04\x06\0\x02\x06\x12\x03\x0b\
    \x02<\n\x0c\n\x05\x06\0\x02\x06\x01\x12\x03\x0b\x06\x17\n\x0c\n\x05\x06\
    \0\x02\x06\x02\x12\x03\x0b\x18\"\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03\
    \x0b-:\n\n\n\x02\x04\0\x12\x04\x0e\0\x10\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x0e\x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0f\x02\x13\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x0f\x02\x06\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\
    \x07\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0f\x11\x12\n\n\n\x02\x04\
    \x01\x12\x04\x12\0\x15\x01\n\n\n\x03\x04\x01\x01\x12\x03\x12\x08\x1a\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\x13\x02\x14\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x13\t\x0f\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x13\x12\x13\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03\x14\x02\x13\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x14\
    \x02\x06\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x14\x07\x0e\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x14\x11\x12\nB\n\x02\x04\x02\x12\x04\x17\0\
    \x1d\x01\"6\x20can\x20be\x20used\x20for\x20adding,\x20deleting,\x20updat\
    ing\x20api\x20rules\n\n\n\n\x03\x04\x02\x01\x12\x03\x17\x08\x19\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x03\x18\x02\x14\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x03\x18\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x18\t\x0f\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03\x18\x12\x13\n\x0b\n\x04\x04\x02\x02\x01\
    \x12\x03\x19\x02\x12\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x19\x02\x08\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x19\t\r\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03\x19\x10\x11\nv\n\x04\x04\x02\x02\x02\x12\x03\x1b\x02.\
    \x1a*\x20following\x20whitelist\x20factors\x20are\x20optional\n\"=\x20th\
    ere\x20could\x20be\x20multiple\x20key\x20value\x20header\x20whitelist\
    \x20factors!\n\n\x0c\n\x05\x04\x02\x02\x02\x06\x12\x03\x1b\x02\x15\n\x0c\
    \n\x05\x04\x02\x02\x02\x01\x12\x03\x1b\x16)\n\x0c\n\x05\x04\x02\x02\x02\
    \x03\x12\x03\x1b,-\n6\n\x04\x04\x02\x02\x03\x12\x03\x1c\x02\x1a\")\x20ip\
    s\x20that\x20are\x20whitelisted\x20no\x20matter\x20what\n\n\x0c\n\x05\
    \x04\x02\x02\x03\x04\x12\x03\x1c\x02\n\n\x0c\n\x05\x04\x02\x02\x03\x05\
    \x12\x03\x1c\x0b\x11\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x1c\x12\x15\
    \n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x1c\x18\x19\n\n\n\x02\x04\x03\
    \x12\x04\x1f\0-\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1f\x08\x0f\n\x0b\n\
    \x04\x04\x03\x02\0\x12\x03\x20\x02\x14\n\x0c\n\x05\x04\x03\x02\0\x05\x12\
    \x03\x20\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x20\t\x0f\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03\x20\x12\x13\nZ\n\x04\x04\x03\x02\x01\x12\
    \x03!\x02\x17\"M\x20the\x20overarching\x20rule\x20setting\x20path,\x20we\
    \x20use\x20this\x20for\x20identifying\x20rule\x20schemas\n\n\x0c\n\x05\
    \x04\x03\x02\x01\x05\x12\x03!\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03!\t\x12\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03!\x15\x16\n\x0b\n\
    \x04\x04\x03\x02\x02\x12\x03\"\x02\x15\n\x0c\n\x05\x04\x03\x02\x02\x05\
    \x12\x03\"\x02\x07\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03\"\x08\x10\n\
    \x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\"\x13\x14\nB\n\x04\x04\x03\x02\
    \x03\x12\x03#\x02\x12\"5\x20path\x20for\x20this\x20specific\x20rule,\x20\
    make\x20sure\x20to\x20respect\x20*\n\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\
    \x03#\x02\x08\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03#\t\r\n\x0c\n\x05\
    \x04\x03\x02\x03\x03\x12\x03#\x10\x11\n@\n\x04\x04\x03\x02\x04\x12\x03$\
    \x02\x1a\"3\x20can\x20either\x20be\x20\"Exact\",\x20\"Contains\"\x20or\
    \x20\"StartsWith\"\n\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03$\x02\x08\n\
    \x0c\n\x05\x04\x03\x02\x04\x01\x12\x03$\t\x15\n\x0c\n\x05\x04\x03\x02\
    \x04\x03\x12\x03$\x18\x19\n8\n\x04\x04\x03\x02\x05\x12\x03%\x02\x1e\"+\
    \x20allow\x20a\x20query\x20string\x20to\x20be\x20passed\x20through\n\n\
    \x0c\n\x05\x04\x03\x02\x05\x05\x12\x03%\x02\x06\n\x0c\n\x05\x04\x03\x02\
    \x05\x01\x12\x03%\x07\x19\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03%\x1c\
    \x1d\no\n\x04\x04\x03\x02\x06\x12\x03'\x02!\x1a'\x20you\x20could\x20have\
    \x20both\x20of\x20the\x20following!\n\"9\x20\"optional\"\x20websocket\
    \x20methods\x20(Ping,\x20Txt,\x20Binary,\x20Close)\n\n\x0c\n\x05\x04\x03\
    \x02\x06\x04\x12\x03'\x02\n\n\x0c\n\x05\x04\x03\x02\x06\x05\x12\x03'\x0b\
    \x11\n\x0c\n\x05\x04\x03\x02\x06\x01\x12\x03'\x12\x1c\n\x0c\n\x05\x04\
    \x03\x02\x06\x03\x12\x03'\x1f\x20\nC\n\x04\x04\x03\x02\x07\x12\x03(\x02\
    \"\"6\x20\"optional\"\x20http\x20methods\x20(Get,\x20Post,\x20Options,\
    \x20Delete)\n\n\x0c\n\x05\x04\x03\x02\x07\x04\x12\x03(\x02\n\n\x0c\n\x05\
    \x04\x03\x02\x07\x05\x12\x03(\x0b\x11\n\x0c\n\x05\x04\x03\x02\x07\x01\
    \x12\x03(\x12\x1d\n\x0c\n\x05\x04\x03\x02\x07\x03\x12\x03(\x20!\n\x97\
    \x01\n\x04\x04\x03\x02\x08\x12\x03*\x02'\x1a\\\x20if\x20the\x20rule\x20m\
    atches,\x20it's\x20now\x20technically\x20\"allowed,\"\x20but\x20we\x20al\
    low\x20the\x20user\x20to\x20do\x20more\x20here\n\",\x20ratelimiting\x20b\
    ucket.\x20{domain}_{id}\x20bucket!\n\n\x0c\n\x05\x04\x03\x02\x08\x04\x12\
    \x03*\x02\n\n\x0c\n\x05\x04\x03\x02\x08\x05\x12\x03*\x0b\x11\n\x0c\n\x05\
    \x04\x03\x02\x08\x01\x12\x03*\x12\"\n\x0c\n\x05\x04\x03\x02\x08\x03\x12\
    \x03*%&\n>\n\x04\x04\x03\x02\t\x12\x03+\x02#\"1\x20None,\x20Standard,\
    \x20IgnoreQueryString\x20or\x20Aggressive\n\n\x0c\n\x05\x04\x03\x02\t\
    \x04\x12\x03+\x02\n\n\x0c\n\x05\x04\x03\x02\t\x05\x12\x03+\x0b\x11\n\x0c\
    \n\x05\x04\x03\x02\t\x01\x12\x03+\x12\x1d\n\x0c\n\x05\x04\x03\x02\t\x03\
    \x12\x03+\x20\"\n5\n\x04\x04\x03\x02\n\x12\x03,\x02&\"(\x20the\x20option\
    al\x20cache\x20level\x20time\x20to\x20live!\n\n\x0c\n\x05\x04\x03\x02\n\
    \x04\x12\x03,\x02\n\n\x0c\n\x05\x04\x03\x02\n\x05\x12\x03,\x0b\x10\n\x0c\
    \n\x05\x04\x03\x02\n\x01\x12\x03,\x11\x20\n\x0c\n\x05\x04\x03\x02\n\x03\
    \x12\x03,#%\n\n\n\x02\x04\x04\x12\x04/\0?\x01\n\n\n\x03\x04\x04\x01\x12\
    \x03/\x08\x12\n$\n\x04\x04\x04\x02\0\x12\x031\x02\x14\x1a\x17\x20require\
    d\x20information!\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x031\x02\x08\n\x0c\
    \n\x05\x04\x04\x02\0\x01\x12\x031\t\x0f\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x031\x12\x13\n\x0b\n\x04\x04\x04\x02\x01\x12\x032\x02\x17\n\x0c\n\
    \x05\x04\x04\x02\x01\x05\x12\x032\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x032\t\x12\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x032\x15\x16\n\
    \x0b\n\x04\x04\x04\x02\x02\x12\x033\x02\x12\n\x0c\n\x05\x04\x04\x02\x02\
    \x05\x12\x033\x02\x08\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x033\t\r\n\x0c\
    \n\x05\x04\x04\x02\x02\x03\x12\x033\x10\x11\n$\n\x04\x04\x04\x02\x03\x12\
    \x035\x02\x1e\x1a\x17\x20optionals\x20(to\x20modify)\n\n\x0c\n\x05\x04\
    \x04\x02\x03\x04\x12\x035\x02\n\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\x035\
    \x0b\x10\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x035\x11\x19\n\x0c\n\x05\
    \x04\x04\x02\x03\x03\x12\x035\x1c\x1d\n\x0b\n\x04\x04\x04\x02\x04\x12\
    \x036\x02#\n\x0c\n\x05\x04\x04\x02\x04\x04\x12\x036\x02\n\n\x0c\n\x05\
    \x04\x04\x02\x04\x05\x12\x036\x0b\x11\n\x0c\n\x05\x04\x04\x02\x04\x01\
    \x12\x036\x12\x1e\n\x0c\n\x05\x04\x04\x02\x04\x03\x12\x036!\"\n\x0b\n\
    \x04\x04\x04\x02\x05\x12\x037\x02'\n\x0c\n\x05\x04\x04\x02\x05\x04\x12\
    \x037\x02\n\n\x0c\n\x05\x04\x04\x02\x05\x05\x12\x037\x0b\x0f\n\x0c\n\x05\
    \x04\x04\x02\x05\x01\x12\x037\x10\"\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\
    \x037%&\no\n\x04\x04\x04\x02\x06\x12\x039\x02!\x1a'\x20you\x20could\x20h\
    ave\x20both\x20of\x20the\x20following!\n\"9\x20\"optional\"\x20websocket\
    \x20methods\x20(Ping,\x20Txt,\x20Binary,\x20Close)\n\n\x0c\n\x05\x04\x04\
    \x02\x06\x04\x12\x039\x02\n\n\x0c\n\x05\x04\x04\x02\x06\x05\x12\x039\x0b\
    \x11\n\x0c\n\x05\x04\x04\x02\x06\x01\x12\x039\x12\x1c\n\x0c\n\x05\x04\
    \x04\x02\x06\x03\x12\x039\x1f\x20\nC\n\x04\x04\x04\x02\x07\x12\x03:\x02\
    \"\"6\x20\"optional\"\x20http\x20methods\x20(Get,\x20Post,\x20Options,\
    \x20Delete)\n\n\x0c\n\x05\x04\x04\x02\x07\x04\x12\x03:\x02\n\n\x0c\n\x05\
    \x04\x04\x02\x07\x05\x12\x03:\x0b\x11\n\x0c\n\x05\x04\x04\x02\x07\x01\
    \x12\x03:\x12\x1d\n\x0c\n\x05\x04\x04\x02\x07\x03\x12\x03:\x20!\n\x97\
    \x01\n\x04\x04\x04\x02\x08\x12\x03<\x02'\x1a\\\x20if\x20the\x20rule\x20m\
    atches,\x20it's\x20now\x20technically\x20\"allowed,\"\x20but\x20we\x20al\
    low\x20the\x20user\x20to\x20do\x20more\x20here\n\",\x20ratelimiting\x20b\
    ucket.\x20{domain}_{id}\x20bucket!\n\n\x0c\n\x05\x04\x04\x02\x08\x04\x12\
    \x03<\x02\n\n\x0c\n\x05\x04\x04\x02\x08\x05\x12\x03<\x0b\x11\n\x0c\n\x05\
    \x04\x04\x02\x08\x01\x12\x03<\x12\"\n\x0c\n\x05\x04\x04\x02\x08\x03\x12\
    \x03<%&\n>\n\x04\x04\x04\x02\t\x12\x03=\x02#\"1\x20None,\x20Standard,\
    \x20IgnoreQueryString\x20or\x20Aggressive\n\n\x0c\n\x05\x04\x04\x02\t\
    \x04\x12\x03=\x02\n\n\x0c\n\x05\x04\x04\x02\t\x05\x12\x03=\x0b\x11\n\x0c\
    \n\x05\x04\x04\x02\t\x01\x12\x03=\x12\x1d\n\x0c\n\x05\x04\x04\x02\t\x03\
    \x12\x03=\x20\"\n5\n\x04\x04\x04\x02\n\x12\x03>\x02&\"(\x20the\x20option\
    al\x20cache\x20level\x20time\x20to\x20live!\n\n\x0c\n\x05\x04\x04\x02\n\
    \x04\x12\x03>\x02\n\n\x0c\n\x05\x04\x04\x02\n\x05\x12\x03>\x0b\x10\n\x0c\
    \n\x05\x04\x04\x02\n\x01\x12\x03>\x11\x20\n\x0c\n\x05\x04\x04\x02\n\x03\
    \x12\x03>#%\n\n\n\x02\x04\x05\x12\x04A\0F\x01\n\n\n\x03\x04\x05\x01\x12\
    \x03A\x08\x12\n$\n\x04\x04\x05\x02\0\x12\x03C\x02\x14\x1a\x17\x20require\
    d\x20information!\n\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03C\x02\x08\n\x0c\
    \n\x05\x04\x05\x02\0\x01\x12\x03C\t\x0f\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03C\x12\x13\n\x0b\n\x04\x04\x05\x02\x01\x12\x03D\x02\x17\n\x0c\n\
    \x05\x04\x05\x02\x01\x05\x12\x03D\x02\x08\n\x0c\n\x05\x04\x05\x02\x01\
    \x01\x12\x03D\t\x12\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03D\x15\x16\n\
    \x0b\n\x04\x04\x05\x02\x02\x12\x03E\x02\x12\n\x0c\n\x05\x04\x05\x02\x02\
    \x05\x12\x03E\x02\x08\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03E\t\r\n\x0c\
    \n\x05\x04\x05\x02\x02\x03\x12\x03E\x10\x11b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(QueryResponse::generated_message_descriptor_data());
            messages.push(EnableStatusUpdate::generated_message_descriptor_data());
            messages.push(RuleSettingSchema::generated_message_descriptor_data());
            messages.push(NewRule::generated_message_descriptor_data());
            messages.push(UpdateRule::generated_message_descriptor_data());
            messages.push(DeleteRule::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

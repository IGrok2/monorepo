// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `caching.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:QueryResponse)
pub struct QueryResponse {
    // message fields
    // @@protoc_insertion_point(field:QueryResponse.success)
    pub success: bool,
    // special fields
    // @@protoc_insertion_point(special_field:QueryResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryResponse {
    fn default() -> &'a QueryResponse {
        <QueryResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryResponse {
    pub fn new() -> QueryResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "success",
            |m: &QueryResponse| { &m.success },
            |m: &mut QueryResponse| { &mut m.success },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryResponse>(
            "QueryResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryResponse {
    const NAME: &'static str = "QueryResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryResponse {
        QueryResponse::new()
    }

    fn clear(&mut self) {
        self.success = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryResponse {
        static instance: QueryResponse = QueryResponse {
            success: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:EnableStatusUpdate)
pub struct EnableStatusUpdate {
    // message fields
    // @@protoc_insertion_point(field:EnableStatusUpdate.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:EnableStatusUpdate.enabled)
    pub enabled: bool,
    // special fields
    // @@protoc_insertion_point(special_field:EnableStatusUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EnableStatusUpdate {
    fn default() -> &'a EnableStatusUpdate {
        <EnableStatusUpdate as ::protobuf::Message>::default_instance()
    }
}

impl EnableStatusUpdate {
    pub fn new() -> EnableStatusUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "domain",
            |m: &EnableStatusUpdate| { &m.domain },
            |m: &mut EnableStatusUpdate| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "enabled",
            |m: &EnableStatusUpdate| { &m.enabled },
            |m: &mut EnableStatusUpdate| { &mut m.enabled },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EnableStatusUpdate>(
            "EnableStatusUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EnableStatusUpdate {
    const NAME: &'static str = "EnableStatusUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.domain = is.read_string()?;
                },
                16 => {
                    self.enabled = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if self.enabled != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if self.enabled != false {
            os.write_bool(2, self.enabled)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EnableStatusUpdate {
        EnableStatusUpdate::new()
    }

    fn clear(&mut self) {
        self.domain.clear();
        self.enabled = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EnableStatusUpdate {
        static instance: EnableStatusUpdate = EnableStatusUpdate {
            domain: ::std::string::String::new(),
            enabled: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EnableStatusUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EnableStatusUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EnableStatusUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnableStatusUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ChangeDefaultUpdate)
pub struct ChangeDefaultUpdate {
    // message fields
    // @@protoc_insertion_point(field:ChangeDefaultUpdate.cache_level)
    pub cache_level: ::protobuf::EnumOrUnknown<CacheLevel>,
    // @@protoc_insertion_point(field:ChangeDefaultUpdate.default_ttl)
    pub default_ttl: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:ChangeDefaultUpdate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChangeDefaultUpdate {
    fn default() -> &'a ChangeDefaultUpdate {
        <ChangeDefaultUpdate as ::protobuf::Message>::default_instance()
    }
}

impl ChangeDefaultUpdate {
    pub fn new() -> ChangeDefaultUpdate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cache_level",
            |m: &ChangeDefaultUpdate| { &m.cache_level },
            |m: &mut ChangeDefaultUpdate| { &mut m.cache_level },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "default_ttl",
            |m: &ChangeDefaultUpdate| { &m.default_ttl },
            |m: &mut ChangeDefaultUpdate| { &mut m.default_ttl },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChangeDefaultUpdate>(
            "ChangeDefaultUpdate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChangeDefaultUpdate {
    const NAME: &'static str = "ChangeDefaultUpdate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.cache_level = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.default_ttl = ::std::option::Option::Some(is.read_sint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.cache_level != ::protobuf::EnumOrUnknown::new(CacheLevel::None) {
            my_size += ::protobuf::rt::int32_size(1, self.cache_level.value());
        }
        if let Some(v) = self.default_ttl {
            my_size += ::protobuf::rt::sint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.cache_level != ::protobuf::EnumOrUnknown::new(CacheLevel::None) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.cache_level))?;
        }
        if let Some(v) = self.default_ttl {
            os.write_sint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChangeDefaultUpdate {
        ChangeDefaultUpdate::new()
    }

    fn clear(&mut self) {
        self.cache_level = ::protobuf::EnumOrUnknown::new(CacheLevel::None);
        self.default_ttl = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChangeDefaultUpdate {
        static instance: ChangeDefaultUpdate = ChangeDefaultUpdate {
            cache_level: ::protobuf::EnumOrUnknown::from_i32(0),
            default_ttl: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChangeDefaultUpdate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChangeDefaultUpdate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChangeDefaultUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChangeDefaultUpdate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ClearCacheSchema)
pub struct ClearCacheSchema {
    // message fields
    // @@protoc_insertion_point(field:ClearCacheSchema.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:ClearCacheSchema.path)
    pub path: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ClearCacheSchema.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClearCacheSchema {
    fn default() -> &'a ClearCacheSchema {
        <ClearCacheSchema as ::protobuf::Message>::default_instance()
    }
}

impl ClearCacheSchema {
    pub fn new() -> ClearCacheSchema {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "domain",
            |m: &ClearCacheSchema| { &m.domain },
            |m: &mut ClearCacheSchema| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &ClearCacheSchema| { &m.path },
            |m: &mut ClearCacheSchema| { &mut m.path },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClearCacheSchema>(
            "ClearCacheSchema",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClearCacheSchema {
    const NAME: &'static str = "ClearCacheSchema";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.domain = is.read_string()?;
                },
                18 => {
                    self.path = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClearCacheSchema {
        ClearCacheSchema::new()
    }

    fn clear(&mut self) {
        self.domain.clear();
        self.path.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClearCacheSchema {
        static instance: ClearCacheSchema = ClearCacheSchema {
            domain: ::std::string::String::new(),
            path: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClearCacheSchema {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClearCacheSchema").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClearCacheSchema {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClearCacheSchema {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CacheLevel)
pub enum CacheLevel {
    // @@protoc_insertion_point(enum_value:CacheLevel.None)
    None = 0,
    // @@protoc_insertion_point(enum_value:CacheLevel.Standard)
    Standard = 1,
    // @@protoc_insertion_point(enum_value:CacheLevel.IgnoreQueryString)
    IgnoreQueryString = 2,
    // @@protoc_insertion_point(enum_value:CacheLevel.Aggressive)
    Aggressive = 3,
}

impl ::protobuf::Enum for CacheLevel {
    const NAME: &'static str = "CacheLevel";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CacheLevel> {
        match value {
            0 => ::std::option::Option::Some(CacheLevel::None),
            1 => ::std::option::Option::Some(CacheLevel::Standard),
            2 => ::std::option::Option::Some(CacheLevel::IgnoreQueryString),
            3 => ::std::option::Option::Some(CacheLevel::Aggressive),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CacheLevel] = &[
        CacheLevel::None,
        CacheLevel::Standard,
        CacheLevel::IgnoreQueryString,
        CacheLevel::Aggressive,
    ];
}

impl ::protobuf::EnumFull for CacheLevel {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CacheLevel").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CacheLevel {
    fn default() -> Self {
        CacheLevel::None
    }
}

impl CacheLevel {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CacheLevel>("CacheLevel")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rcaching.proto\")\n\rQueryResponse\x12\x18\n\x07success\x18\x01\x20\
    \x01(\x08R\x07success\"F\n\x12EnableStatusUpdate\x12\x16\n\x06domain\x18\
    \x01\x20\x01(\tR\x06domain\x12\x18\n\x07enabled\x18\x02\x20\x01(\x08R\
    \x07enabled\"y\n\x13ChangeDefaultUpdate\x12,\n\x0bcache_level\x18\x01\
    \x20\x01(\x0e2\x0b.CacheLevelR\ncacheLevel\x12$\n\x0bdefault_ttl\x18\x02\
    \x20\x01(\x11H\0R\ndefaultTtl\x88\x01\x01B\x0e\n\x0c_default_ttl\">\n\
    \x10ClearCacheSchema\x12\x16\n\x06domain\x18\x01\x20\x01(\tR\x06domain\
    \x12\x12\n\x04path\x18\x02\x20\x01(\tR\x04path*K\n\nCacheLevel\x12\x08\n\
    \x04None\x10\0\x12\x0c\n\x08Standard\x10\x01\x12\x15\n\x11IgnoreQueryStr\
    ing\x10\x02\x12\x0e\n\nAggressive\x10\x032\xb3\x01\n\rCachingEngine\x129\
    \n\x12ChangeEnableStatus\x12\x13.EnableStatusUpdate\x1a\x0e.QueryRespons\
    e\x126\n\x0eChangeDefaults\x12\x14.ChangeDefaultUpdate\x1a\x0e.QueryResp\
    onse\x12/\n\nClearCache\x12\x11.ClearCacheSchema\x1a\x0e.QueryResponseJ\
    \xc1\x07\n\x06\x12\x04\0\0!\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\
    \x02\x06\0\x12\x04\x02\0\x07\x01\n\n\n\x03\x06\0\x01\x12\x03\x02\x08\x15\
    \n\x0b\n\x04\x06\0\x02\0\x12\x03\x03\x02E\n\x0c\n\x05\x06\0\x02\0\x01\
    \x12\x03\x03\x06\x18\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x03\x19+\n\x0c\
    \n\x05\x06\0\x02\0\x03\x12\x03\x036C\n\x0b\n\x04\x06\0\x02\x01\x12\x03\
    \x04\x02B\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x04\x06\x14\n\x0c\n\x05\
    \x06\0\x02\x01\x02\x12\x03\x04\x15(\n\x0c\n\x05\x06\0\x02\x01\x03\x12\
    \x03\x043@\n\x0b\n\x04\x06\0\x02\x02\x12\x03\x06\x02;\n\x0c\n\x05\x06\0\
    \x02\x02\x01\x12\x03\x06\x06\x10\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\
    \x06\x11!\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x06,9\n\n\n\x02\x04\0\
    \x12\x04\t\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\t\x08\x15\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\n\x02\x13\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\n\x02\
    \x06\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\n\x07\x0e\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\n\x11\x12\n\n\n\x02\x04\x01\x12\x04\r\0\x10\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\r\x08\x1a\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0e\x02\
    \x14\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x0e\t\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x0e\x12\x13\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0f\x02\x13\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\x0f\x02\x06\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x0f\x07\x0e\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0f\x11\x12\
    \n\n\n\x02\x04\x02\x12\x04\x12\0\x15\x01\n\n\n\x03\x04\x02\x01\x12\x03\
    \x12\x08\x1b\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x13\x02\x1d\n\x0c\n\x05\
    \x04\x02\x02\0\x06\x12\x03\x13\x02\x0c\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03\x13\r\x18\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x13\x1b\x1c\n\x0b\n\
    \x04\x04\x02\x02\x01\x12\x03\x14\x02\"\n\x0c\n\x05\x04\x02\x02\x01\x04\
    \x12\x03\x14\x02\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x14\x0b\x11\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x14\x12\x1d\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x03\x14\x20!\n\n\n\x02\x04\x03\x12\x04\x17\0\x1a\x01\n\
    \n\n\x03\x04\x03\x01\x12\x03\x17\x08\x18\n\x0b\n\x04\x04\x03\x02\0\x12\
    \x03\x18\x02\x14\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x18\x02\x08\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x03\x18\t\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03\x18\x12\x13\nR\n\x04\x04\x03\x02\x01\x12\x03\x19\x02\x12\"E\x20\
    can\x20be\x20*\x20for\x20all,\x20or\x20can\x20use\x20*\x20in\x20the\x20p\
    ath,\x20or\x20can\x20be\x20specific\x20path\n\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x19\
    \t\r\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x19\x10\x11\n\n\n\x02\x05\0\
    \x12\x04\x1c\0!\x01\n\n\n\x03\x05\0\x01\x12\x03\x1c\x05\x0f\n\x0b\n\x04\
    \x05\0\x02\0\x12\x03\x1d\x02\x0b\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x1d\
    \x02\x06\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x1d\t\n\n\x0b\n\x04\x05\0\
    \x02\x01\x12\x03\x1e\x02\x0f\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x1e\
    \x02\n\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x1e\r\x0e\n\x0b\n\x04\x05\0\
    \x02\x02\x12\x03\x1f\x02\x18\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x1f\
    \x02\x13\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x1f\x16\x17\n\x0b\n\x04\
    \x05\0\x02\x03\x12\x03\x20\x02\x11\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\
    \x20\x02\x0c\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x20\x0f\x10b\x06proto\
    3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(QueryResponse::generated_message_descriptor_data());
            messages.push(EnableStatusUpdate::generated_message_descriptor_data());
            messages.push(ChangeDefaultUpdate::generated_message_descriptor_data());
            messages.push(ClearCacheSchema::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CacheLevel::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

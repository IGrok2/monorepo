// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `origins.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:QueryResponse)
pub struct QueryResponse {
    // message fields
    // @@protoc_insertion_point(field:QueryResponse.success)
    pub success: bool,
    // special fields
    // @@protoc_insertion_point(special_field:QueryResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryResponse {
    fn default() -> &'a QueryResponse {
        <QueryResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryResponse {
    pub fn new() -> QueryResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "success",
            |m: &QueryResponse| { &m.success },
            |m: &mut QueryResponse| { &mut m.success },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryResponse>(
            "QueryResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryResponse {
    const NAME: &'static str = "QueryResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.success = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryResponse {
        QueryResponse::new()
    }

    fn clear(&mut self) {
        self.success = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryResponse {
        static instance: QueryResponse = QueryResponse {
            success: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OriginSetting)
pub struct OriginSetting {
    // message fields
    ///  for identification
    // @@protoc_insertion_point(field:OriginSetting.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:OriginSetting.host)
    pub host: ::std::string::String,
    // @@protoc_insertion_point(field:OriginSetting.ssl)
    pub ssl: bool,
    // @@protoc_insertion_point(field:OriginSetting.http2)
    pub http2: bool,
    // @@protoc_insertion_point(field:OriginSetting.timeout)
    pub timeout: i32,
    // @@protoc_insertion_point(field:OriginSetting.ip_data)
    pub ip_data: bool,
    // special fields
    // @@protoc_insertion_point(special_field:OriginSetting.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a OriginSetting {
    fn default() -> &'a OriginSetting {
        <OriginSetting as ::protobuf::Message>::default_instance()
    }
}

impl OriginSetting {
    pub fn new() -> OriginSetting {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "domain",
            |m: &OriginSetting| { &m.domain },
            |m: &mut OriginSetting| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "host",
            |m: &OriginSetting| { &m.host },
            |m: &mut OriginSetting| { &mut m.host },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ssl",
            |m: &OriginSetting| { &m.ssl },
            |m: &mut OriginSetting| { &mut m.ssl },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "http2",
            |m: &OriginSetting| { &m.http2 },
            |m: &mut OriginSetting| { &mut m.http2 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timeout",
            |m: &OriginSetting| { &m.timeout },
            |m: &mut OriginSetting| { &mut m.timeout },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ip_data",
            |m: &OriginSetting| { &m.ip_data },
            |m: &mut OriginSetting| { &mut m.ip_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<OriginSetting>(
            "OriginSetting",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for OriginSetting {
    const NAME: &'static str = "OriginSetting";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.domain = is.read_string()?;
                },
                18 => {
                    self.host = is.read_string()?;
                },
                24 => {
                    self.ssl = is.read_bool()?;
                },
                32 => {
                    self.http2 = is.read_bool()?;
                },
                40 => {
                    self.timeout = is.read_sint32()?;
                },
                48 => {
                    self.ip_data = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.host);
        }
        if self.ssl != false {
            my_size += 1 + 1;
        }
        if self.http2 != false {
            my_size += 1 + 1;
        }
        if self.timeout != 0 {
            my_size += ::protobuf::rt::sint32_size(5, self.timeout);
        }
        if self.ip_data != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if !self.host.is_empty() {
            os.write_string(2, &self.host)?;
        }
        if self.ssl != false {
            os.write_bool(3, self.ssl)?;
        }
        if self.http2 != false {
            os.write_bool(4, self.http2)?;
        }
        if self.timeout != 0 {
            os.write_sint32(5, self.timeout)?;
        }
        if self.ip_data != false {
            os.write_bool(6, self.ip_data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> OriginSetting {
        OriginSetting::new()
    }

    fn clear(&mut self) {
        self.domain.clear();
        self.host.clear();
        self.ssl = false;
        self.http2 = false;
        self.timeout = 0;
        self.ip_data = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static OriginSetting {
        static instance: OriginSetting = OriginSetting {
            domain: ::std::string::String::new(),
            host: ::std::string::String::new(),
            ssl: false,
            http2: false,
            timeout: 0,
            ip_data: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for OriginSetting {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("OriginSetting").unwrap()).clone()
    }
}

impl ::std::fmt::Display for OriginSetting {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OriginSetting {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Origin)
pub struct Origin {
    // message fields
    ///  for identification
    // @@protoc_insertion_point(field:Origin.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:Origin.host)
    pub host: ::std::string::String,
    // @@protoc_insertion_point(field:Origin.backend)
    pub backend: ::std::string::String,
    // @@protoc_insertion_point(field:Origin.weight)
    pub weight: i32,
    // special fields
    // @@protoc_insertion_point(special_field:Origin.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Origin {
    fn default() -> &'a Origin {
        <Origin as ::protobuf::Message>::default_instance()
    }
}

impl Origin {
    pub fn new() -> Origin {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "domain",
            |m: &Origin| { &m.domain },
            |m: &mut Origin| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "host",
            |m: &Origin| { &m.host },
            |m: &mut Origin| { &mut m.host },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "backend",
            |m: &Origin| { &m.backend },
            |m: &mut Origin| { &mut m.backend },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "weight",
            |m: &Origin| { &m.weight },
            |m: &mut Origin| { &mut m.weight },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Origin>(
            "Origin",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Origin {
    const NAME: &'static str = "Origin";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.domain = is.read_string()?;
                },
                18 => {
                    self.host = is.read_string()?;
                },
                26 => {
                    self.backend = is.read_string()?;
                },
                32 => {
                    self.weight = is.read_sint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.host);
        }
        if !self.backend.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.backend);
        }
        if self.weight != 0 {
            my_size += ::protobuf::rt::sint32_size(4, self.weight);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if !self.host.is_empty() {
            os.write_string(2, &self.host)?;
        }
        if !self.backend.is_empty() {
            os.write_string(3, &self.backend)?;
        }
        if self.weight != 0 {
            os.write_sint32(4, self.weight)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Origin {
        Origin::new()
    }

    fn clear(&mut self) {
        self.domain.clear();
        self.host.clear();
        self.backend.clear();
        self.weight = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Origin {
        static instance: Origin = Origin {
            domain: ::std::string::String::new(),
            host: ::std::string::String::new(),
            backend: ::std::string::String::new(),
            weight: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Origin {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Origin").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Origin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Origin {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rorigins.proto\")\n\rQueryResponse\x12\x18\n\x07success\x18\x01\x20\
    \x01(\x08R\x07success\"\x96\x01\n\rOriginSetting\x12\x16\n\x06domain\x18\
    \x01\x20\x01(\tR\x06domain\x12\x12\n\x04host\x18\x02\x20\x01(\tR\x04host\
    \x12\x10\n\x03ssl\x18\x03\x20\x01(\x08R\x03ssl\x12\x14\n\x05http2\x18\
    \x04\x20\x01(\x08R\x05http2\x12\x18\n\x07timeout\x18\x05\x20\x01(\x11R\
    \x07timeout\x12\x17\n\x07ip_data\x18\x06\x20\x01(\x08R\x06ipData\"f\n\
    \x06Origin\x12\x16\n\x06domain\x18\x01\x20\x01(\tR\x06domain\x12\x12\n\
    \x04host\x18\x02\x20\x01(\tR\x04host\x12\x18\n\x07backend\x18\x03\x20\
    \x01(\tR\x07backend\x12\x16\n\x06weight\x18\x04\x20\x01(\x11R\x06weight2\
    \x83\x02\n\x10OriginManagement\x122\n\x10AddOriginSetting\x12\x0e.Origin\
    Setting\x1a\x0e.QueryResponse\x125\n\x13ModifyOriginSetting\x12\x0e.Orig\
    inSetting\x1a\x0e.QueryResponse\x125\n\x13DeleteOriginSetting\x12\x0e.Or\
    iginSetting\x1a\x0e.QueryResponse\x12$\n\tAddOrigin\x12\x07.Origin\x1a\
    \x0e.QueryResponse\x12'\n\x0cDeleteOrigin\x12\x07.Origin\x1a\x0e.QueryRe\
    sponseJ\xc1\t\n\x06\x12\x04\0\0\x20\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\n\n\x02\x06\0\x12\x04\x02\0\t\x01\n\n\n\x03\x06\0\x01\x12\x03\x02\x08\
    \x18\n\x0b\n\x04\x06\0\x02\0\x12\x03\x03\x02>\n\x0c\n\x05\x06\0\x02\0\
    \x01\x12\x03\x03\x06\x16\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x03\x17$\n\
    \x0c\n\x05\x06\0\x02\0\x03\x12\x03\x03/<\n\x0b\n\x04\x06\0\x02\x01\x12\
    \x03\x04\x02A\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x04\x06\x19\n\x0c\n\
    \x05\x06\0\x02\x01\x02\x12\x03\x04\x1a'\n\x0c\n\x05\x06\0\x02\x01\x03\
    \x12\x03\x042?\n\x0b\n\x04\x06\0\x02\x02\x12\x03\x05\x02A\n\x0c\n\x05\
    \x06\0\x02\x02\x01\x12\x03\x05\x06\x19\n\x0c\n\x05\x06\0\x02\x02\x02\x12\
    \x03\x05\x1a'\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x052?\n\x0b\n\x04\
    \x06\0\x02\x03\x12\x03\x07\x020\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\
    \x07\x06\x0f\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x07\x10\x16\n\x0c\n\
    \x05\x06\0\x02\x03\x03\x12\x03\x07!.\n\x0b\n\x04\x06\0\x02\x04\x12\x03\
    \x08\x023\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x08\x06\x12\n\x0c\n\x05\
    \x06\0\x02\x04\x02\x12\x03\x08\x13\x19\n\x0c\n\x05\x06\0\x02\x04\x03\x12\
    \x03\x08$1\n\n\n\x02\x04\0\x12\x04\x0b\0\r\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x0b\x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0c\x02\x13\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x0c\x02\x06\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x0c\x07\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c\x11\x12\n\n\n\x02\
    \x04\x01\x12\x04\x0f\0\x18\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0f\x08\x15\
    \n!\n\x04\x04\x01\x02\0\x12\x03\x11\x02\x14\x1a\x14\x20for\x20identifica\
    tion\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x11\t\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x11\x12\x13\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x12\x02\x12\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03\x12\t\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x12\x10\x11\n\
    \x7f\n\x04\x04\x01\x02\x02\x12\x03\x14\x02\x0f\"r\x20essentially\x20stri\
    ct\x20or\x20flexible\x20mode,\x20if\x20the\x20answer\x20here\x20is\x20fa\
    lse\x20we\x20will\x20continue\x20to\x20accept\x20ssl\x20from\x20the\x20b\
    ackend\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x14\x02\x06\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03\x14\x07\n\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03\x14\r\x0e\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x15\x02\x11\n\x0c\
    \n\x05\x04\x01\x02\x03\x05\x12\x03\x15\x02\x06\n\x0c\n\x05\x04\x01\x02\
    \x03\x01\x12\x03\x15\x07\x0c\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x15\
    \x0f\x10\n-\n\x04\x04\x01\x02\x04\x12\x03\x16\x02\x15\"\x20\x20timeout\
    \x20to\x20connecting\x20backends\n\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\
    \x03\x16\x02\x08\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x16\t\x10\n\x0c\
    \n\x05\x04\x01\x02\x04\x03\x12\x03\x16\x13\x14\n(\n\x04\x04\x01\x02\x05\
    \x12\x03\x17\x02\x13\"\x1b\x20send\x20ip\x20data\x20to\x20backends?\n\n\
    \x0c\n\x05\x04\x01\x02\x05\x05\x12\x03\x17\x02\x06\n\x0c\n\x05\x04\x01\
    \x02\x05\x01\x12\x03\x17\x07\x0e\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\
    \x17\x11\x12\n\n\n\x02\x04\x02\x12\x04\x1a\0\x20\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03\x1a\x08\x0e\n!\n\x04\x04\x02\x02\0\x12\x03\x1c\x02\x14\x1a\
    \x14\x20for\x20identification\n\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\
    \x1c\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1c\t\x0f\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03\x1c\x12\x13\n\x0b\n\x04\x04\x02\x02\x01\x12\
    \x03\x1d\x02\x12\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x1d\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1d\t\r\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03\x1d\x10\x11\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x1e\x02\
    \x15\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x1e\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\x02\x01\x12\x03\x1e\t\x10\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\
    \x03\x1e\x13\x14\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x1f\x02\x14\n\x0c\n\
    \x05\x04\x02\x02\x03\x05\x12\x03\x1f\x02\x08\n\x0c\n\x05\x04\x02\x02\x03\
    \x01\x12\x03\x1f\t\x0f\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x1f\x12\
    \x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(QueryResponse::generated_message_descriptor_data());
            messages.push(OriginSetting::generated_message_descriptor_data());
            messages.push(Origin::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

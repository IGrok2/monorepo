// we have to send all domain information to the server on startup! TODO!

// this should be absolutely everything!

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.4
// source: rpc/gen/all.proto

package rpc


import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CacheClearType int32

const (
	CacheClearType_ExactPath      CacheClearType = 0
	CacheClearType_ContainsPath   CacheClearType = 1
	CacheClearType_StartsWithPath CacheClearType = 2
	CacheClearType_EndsWithPath   CacheClearType = 3
)

// Enum value maps for CacheClearType.
var (
	CacheClearType_name = map[int32]string{
		0: "ExactPath",
		1: "ContainsPath",
		2: "StartsWithPath",
		3: "EndsWithPath",
	}
	CacheClearType_value = map[string]int32{
		"ExactPath":      0,
		"ContainsPath":   1,
		"StartsWithPath": 2,
		"EndsWithPath":   3,
	}
)

func (x CacheClearType) Enum() *CacheClearType {
	p := new(CacheClearType)
	*p = x
	return p
}

func (x CacheClearType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheClearType) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_gen_all_proto_enumTypes[0].Descriptor()
}

func (CacheClearType) Type() protoreflect.EnumType {
	return &file_rpc_gen_all_proto_enumTypes[0]
}

func (x CacheClearType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheClearType.Descriptor instead.
func (CacheClearType) EnumDescriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{0}
}

type HumanEngineMode int32

const (
	HumanEngineMode_Chill        HumanEngineMode = 0
	HumanEngineMode_StandardMode HumanEngineMode = 1
	HumanEngineMode_StandardPlus HumanEngineMode = 2
)

// Enum value maps for HumanEngineMode.
var (
	HumanEngineMode_name = map[int32]string{
		0: "Chill",
		1: "StandardMode",
		2: "StandardPlus",
	}
	HumanEngineMode_value = map[string]int32{
		"Chill":        0,
		"StandardMode": 1,
		"StandardPlus": 2,
	}
)

func (x HumanEngineMode) Enum() *HumanEngineMode {
	p := new(HumanEngineMode)
	*p = x
	return p
}

func (x HumanEngineMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HumanEngineMode) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_gen_all_proto_enumTypes[1].Descriptor()
}

func (HumanEngineMode) Type() protoreflect.EnumType {
	return &file_rpc_gen_all_proto_enumTypes[1]
}

func (x HumanEngineMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HumanEngineMode.Descriptor instead.
func (HumanEngineMode) EnumDescriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{1}
}

type Region int32

const (
	Region_ASH Region = 0
	Region_LAX Region = 1
	Region_AMS Region = 2
	Region_DAL Region = 3
)

// Enum value maps for Region.
var (
	Region_name = map[int32]string{
		0: "ASH",
		1: "LAX",
		2: "AMS",
		3: "DAL",
	}
	Region_value = map[string]int32{
		"ASH": 0,
		"LAX": 1,
		"AMS": 2,
		"DAL": 3,
	}
)

func (x Region) Enum() *Region {
	p := new(Region)
	*p = x
	return p
}

func (x Region) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Region) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_gen_all_proto_enumTypes[2].Descriptor()
}

func (Region) Type() protoreflect.EnumType {
	return &file_rpc_gen_all_proto_enumTypes[2]
}

func (x Region) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Region.Descriptor instead.
func (Region) EnumDescriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{2}
}

type WsMethods int32

const (
	WsMethods_Txt    WsMethods = 0
	WsMethods_Ping   WsMethods = 1
	WsMethods_Binary WsMethods = 2
	WsMethods_Close  WsMethods = 3
)

// Enum value maps for WsMethods.
var (
	WsMethods_name = map[int32]string{
		0: "Txt",
		1: "Ping",
		2: "Binary",
		3: "Close",
	}
	WsMethods_value = map[string]int32{
		"Txt":    0,
		"Ping":   1,
		"Binary": 2,
		"Close":  3,
	}
)

func (x WsMethods) Enum() *WsMethods {
	p := new(WsMethods)
	*p = x
	return p
}

func (x WsMethods) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WsMethods) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_gen_all_proto_enumTypes[3].Descriptor()
}

func (WsMethods) Type() protoreflect.EnumType {
	return &file_rpc_gen_all_proto_enumTypes[3]
}

func (x WsMethods) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WsMethods.Descriptor instead.
func (WsMethods) EnumDescriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{3}
}

type WebMethods int32

const (
	WebMethods_Get     WebMethods = 0
	WebMethods_Post    WebMethods = 1
	WebMethods_Options WebMethods = 2
	WebMethods_Delete  WebMethods = 3
	WebMethods_Head    WebMethods = 4
	WebMethods_Put     WebMethods = 5
	WebMethods_Connect WebMethods = 6
	WebMethods_Trace   WebMethods = 7
	WebMethods_Patch   WebMethods = 8
)

// Enum value maps for WebMethods.
var (
	WebMethods_name = map[int32]string{
		0: "Get",
		1: "Post",
		2: "Options",
		3: "Delete",
		4: "Head",
		5: "Put",
		6: "Connect",
		7: "Trace",
		8: "Patch",
	}
	WebMethods_value = map[string]int32{
		"Get":     0,
		"Post":    1,
		"Options": 2,
		"Delete":  3,
		"Head":    4,
		"Put":     5,
		"Connect": 6,
		"Trace":   7,
		"Patch":   8,
	}
)

func (x WebMethods) Enum() *WebMethods {
	p := new(WebMethods)
	*p = x
	return p
}
n protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebMethods) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_gen_all_proto_enumTypes[4].Descriptor()
}

func (WebMethods) Type() protoreflect.EnumType {
	return &file_rpc_gen_all_proto_enumTypes[4]
}

func (x WebMethods) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebMethods.Descriptor instead.
func (WebMethods) EnumDescriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{4}
}

type Actions int32

const (
	Actions_RatelimitAPI Actions = 0
	Actions_CacheAPI     Actions = 1
)

// Enum value maps for Actions.
var (
	Actions_name = map[int32]string{
		0: "RatelimitAPI",
		1: "CacheAPI",
	}
	Actions_value = map[string]int32{
		"RatelimitAPI": 0,
		"CacheAPI":     1,
	}
)

func (x Actions) Enum() *Actions {
	p := new(Actions)
	*p = x
	return p
}

func (x Actions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Actions) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_gen_all_proto_enumTypes[5].Descriptor()
}

func (Actions) Type() protoreflect.EnumType {
	return &file_rpc_gen_all_proto_enumTypes[5]
}

func (x Actions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Actions.Descriptor instead.
func (Actions) EnumDescriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{5}
}

type CacheLevel int32

const (
	CacheLevel_None              CacheLevel = 0
	CacheLevel_Standard          CacheLevel = 1
	CacheLevel_IgnoreQueryString CacheLevel = 2
	CacheLevel_Aggressive        CacheLevel = 3
)

// Enum value maps for CacheLevel.
var (
	CacheLevel_name = map[int32]string{
		0: "None",
		1: "Standard",
		2: "IgnoreQueryString",
		3: "Aggressive",
	}
	CacheLevel_value = map[string]int32{
		"None":              0,
		"Standard":          1,
		"IgnoreQueryString": 2,
		"Aggressive":        3,
	}
)

func (x CacheLevel) Enum() *CacheLevel {
	p := new(CacheLevel)
	*p = x
	return p
}

func (x CacheLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_gen_all_proto_enumTypes[6].Descriptor()
}

func (CacheLevel) Type() protoreflect.EnumType {
	return &file_rpc_gen_all_proto_enumTypes[6]
}

func (x CacheLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheLevel.Descriptor instead.
func (CacheLevel) EnumDescriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{6}
}

type Bot int32

const (
	Bot_Googlebot   Bot = 0
	Bot_Bingbot     Bot = 1
	Bot_UptimeRobot Bot = 2
)

// Enum value maps for Bot.
var (
	Bot_name = map[int32]string{
		0: "Googlebot",
		1: "Bingbot",
		2: "UptimeRobot",
	}
	Bot_value = map[string]int32{
		"Googlebot":   0,
		"Bingbot":     1,
		"UptimeRobot": 2,
	}
)

func (x Bot) Enum() *Bot {
	p := new(Bot)
	*p = x
	return p
}

func (x Bot) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bot) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_gen_all_proto_enumTypes[7].Descriptor()
}

func (Bot) Type() protoreflect.EnumType {
	return &file_rpc_gen_all_proto_enumTypes[7]
}

func (x Bot) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bot.Descriptor instead.
func (Bot) EnumDescriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{7}
}

type TriggerType int32

const (
	TriggerType_Ip        TriggerType = 0
	TriggerType_Path      TriggerType = 1
	TriggerType_Query     TriggerType = 2
	TriggerType_Asn       TriggerType = 3
	TriggerType_Country   TriggerType = 4
	TriggerType_Continent TriggerType = 5
	TriggerType_Headers   TriggerType = 6
	TriggerType_Host      TriggerType = 7
	TriggerType_Method    TriggerType = 8
	TriggerType_UserAgent TriggerType = 9
	TriggerType_Cookie    TriggerType = 10
	TriggerType_Any       TriggerType = 11
)

// Enum value maps for TriggerType.
var (
	TriggerType_name = map[int32]string{
		0:  "Ip",
		1:  "Path",
		2:  "Query",
		3:  "Asn",
		4:  "Country",
		5:  "Continent",
		6:  "Headers",
		7:  "Host",
		8:  "Method",
		9:  "UserAgent",
		10: "Cookie",
		11: "Any",
	}
	TriggerType_value = map[string]int32{
		"Ip":        0,
		"Path":      1,
		"Query":     2,
		"Asn":       3,
		"Country":   4,
		"Continent": 5,
		"Headers":   6,
		"Host":      7,
		"Method":    8,
		"UserAgent": 9,
		"Cookie":    10,
		"Any":       11,
	}
)

func (x TriggerType) Enum() *TriggerType {
	p := new(TriggerType)
	*p = x
	return p
}

func (x TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_gen_all_proto_enumTypes[8].Descriptor()
}

func (TriggerType) Type() protoreflect.EnumType {
	return &file_rpc_gen_all_proto_enumTypes[8]
}

func (x TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerType.Descriptor instead.
func (TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{8}
}

// can be shared for API engine as well
type MatchType int32

const (
	MatchType_UseStar    MatchType = 0
	MatchType_Exact      MatchType = 1
	MatchType_Contains   MatchType = 2
	MatchType_StartsWith MatchType = 3
)

// Enum value maps for MatchType.
var (
	MatchType_name = map[int32]string{
		0: "UseStar",
		1: "Exact",
		2: "Contains",
		3: "StartsWith",
	}
	MatchType_value = map[string]int32{
		"UseStar":    0,
		"Exact":      1,
		"Contains":   2,
		"StartsWith": 3,
	}
)

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}

func (x MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_gen_all_proto_enumTypes[9].Descriptor()
}

func (MatchType) Type() protoreflect.EnumType {
	return &file_rpc_gen_all_proto_enumTypes[9]
}

func (x MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchType.Descriptor instead.
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{9}
}

type Action int32

const (
	Action_Monopoly     Action = 0
	Action_Trustbusting Action = 1
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "Monopoly",
		1: "Trustbusting",
	}
	Action_value = map[string]int32{
		"Monopoly":     0,
		"Trustbusting": 1,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_gen_all_proto_enumTypes[10].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_rpc_gen_all_proto_enumTypes[10]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{10}
}

type MonopolyAction int32

const (
	MonopolyAction_Block MonopolyAction = 0
)

// Enum value maps for MonopolyAction.
var (
	MonopolyAction_name = map[int32]string{
		0: "Block",
	}
	MonopolyAction_value = map[string]int32{
		"Block": 0,
	}
)

func (x MonopolyAction) Enum() *MonopolyAction {
	p := new(MonopolyAction)
	*p = x
	return p
}

func (x MonopolyAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonopolyAction) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_gen_all_proto_enumTypes[11].Descriptor()
}

func (MonopolyAction) Type() protoreflect.EnumType {
	return &file_rpc_gen_all_proto_enumTypes[11]
}

func (x MonopolyAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonopolyAction.Descriptor instead.
func (MonopolyAction) EnumDescriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{11}
}

type TrustBustOption int32

const (
	TrustBustOption_SmartChallenge   TrustBustOption = 0
	TrustBustOption_CaptchaChallenge TrustBustOption = 1
	TrustBustOption_RatelimitBucket  TrustBustOption = 2
	TrustBustOption_Cache            TrustBustOption = 3
	TrustBustOption_Redirect         TrustBustOption = 4
	TrustBustOption_UseBackend       TrustBustOption = 5
	TrustBustOption_SkipHumanEngine  TrustBustOption = 6
)

// Enum value maps for TrustBustOption.
var (
	TrustBustOption_name = map[int32]string{
		0: "SmartChallenge",
		1: "CaptchaChallenge",
		2: "RatelimitBucket",
		3: "Cache",
		4: "Redirect",
		5: "UseBackend",
		6: "SkipHumanEngine",
	}
	TrustBustOption_value = map[string]int32{
		"SmartChallenge":   0,
		"CaptchaChallenge": 1,
		"RatelimitBucket":  2,
		"Cache":            3,
		"Redirect":         4,
		"UseBackend":       5,
		"SkipHumanEngine":  6,
	}
)

func (x TrustBustOption) Enum() *TrustBustOption {
	p := new(TrustBustOption)
	*p = x
	return p
}

func (x TrustBustOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrustBustOption) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_gen_all_proto_enumTypes[12].Descriptor()
}

func (TrustBustOption) Type() protoreflect.EnumType {
	return &file_rpc_gen_all_proto_enumTypes[12]
}

func (x TrustBustOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrustBustOption.Descriptor instead.
func (TrustBustOption) EnumDescriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{12}
}

// the new challenge
type SmartChallengeScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmartChallengeScript string `protobuf:"bytes,1,opt,name=smart_challenge_script,json=smartChallengeScript,proto3" json:"smart_challenge_script,omitempty"`
	Key                  []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	BgChallengeScript    string `protobuf:"bytes,3,opt,name=bg_challenge_script,json=bgChallengeScript,proto3" json:"bg_challenge_script,omitempty"`
}

func (x *SmartChallengeScript) Reset() {
	*x = SmartChallengeScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartChallengeScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartChallengeScript) ProtoMessage() {}

func (x *SmartChallengeScript) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartChallengeScript.ProtoReflect.Descriptor instead.
func (*SmartChallengeScript) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{0}
}

func (x *SmartChallengeScript) GetSmartChallengeScript() string {
	if x != nil {
		return x.SmartChallengeScript
	}
	return ""
}

func (x *SmartChallengeScript) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SmartChallengeScript) GetBgChallengeScript() string {
	if x != nil {
		return x.BgChallengeScript
	}
	return ""
}

type ClearCacheMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain     string          `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Everything *bool           `protobuf:"varint,2,opt,name=everything,proto3,oneof" json:"everything,omitempty"`
	Paths      []string        `protobuf:"bytes,3,rep,name=paths,proto3" json:"paths,omitempty"`
	Type       *CacheClearType `protobuf:"varint,4,opt,name=type,proto3,enum=CacheClearType,oneof" json:"type,omitempty"`
}

func (x *ClearCacheMessage) Reset() {
	*x = ClearCacheMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearCacheMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearCacheMessage) ProtoMessage() {}

func (x *ClearCacheMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearCacheMessage.ProtoReflect.Descriptor instead.
func (*ClearCacheMessage) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{1}
}

func (x *ClearCacheMessage) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ClearCacheMessage) GetEverything() bool {
	if x != nil && x.Everything != nil {
		return *x.Everything
	}
	return false
}

func (x *ClearCacheMessage) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *ClearCacheMessage) GetType() CacheClearType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CacheClearType_ExactPath
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{2}
}

func (x *Token) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Token) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Cert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain     string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	FullChain  string `protobuf:"bytes,2,opt,name=full_chain,json=fullChain,proto3" json:"full_chain,omitempty"`
	PrivateKey string `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Wildcard   bool   `protobuf:"varint,5,opt,name=wildcard,proto3" json:"wildcard,omitempty"`
}

func (x *Cert) Reset() {
	*x = Cert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cert) ProtoMessage() {}

func (x *Cert) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cert.ProtoReflect.Descriptor instead.
func (*Cert) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{3}
}

func (x *Cert) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Cert) GetFullChain() string {
	if x != nil {
		return x.FullChain
	}
	return ""
}

func (x *Cert) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *Cert) GetWildcard() bool {
	if x != nil {
		return x.Wildcard
	}
	return false
}

// THE MAIN THINGS
type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{4}
}

func (x *QueryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *QueryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AllDomainSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    bool                  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Everything []*FullDomainSchema   `protobuf:"bytes,2,rep,name=everything,proto3" json:"everything,omitempty"`
	Keys       []*Cert               `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`
	Challenge  *SmartChallengeScript `protobuf:"bytes,4,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *AllDomainSchema) Reset() {
	*x = AllDomainSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllDomainSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllDomainSchema) ProtoMessage() {}

func (x *AllDomainSchema) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllDomainSchema.ProtoReflect.Descriptor instead.
func (*AllDomainSchema) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{5}
}

func (x *AllDomainSchema) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AllDomainSchema) GetEverything() []*FullDomainSchema {
	if x != nil {
		return x.Everything
	}
	return nil
}

func (x *AllDomainSchema) GetKeys() []*Cert {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *AllDomainSchema) GetChallenge() *SmartChallengeScript {
	if x != nil {
		return x.Challenge
	}
	return nil
}

// for when a domain is updated, only the difference is sent
type PartialDomainSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain              string                    `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	OriginSettings      map[string]*OriginSetting `protobuf:"bytes,2,rep,name=origin_settings,json=originSettings,proto3" json:"origin_settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // if this isn't part of it, then it'll just be empty
	ApiEngineSettings   *ApiEngineSettings        `protobuf:"bytes,3,opt,name=api_engine_settings,json=apiEngineSettings,proto3,oneof" json:"api_engine_settings,omitempty"`
	HumanEngineSettings *HumanEngine              `protobuf:"bytes,4,opt,name=human_engine_settings,json=humanEngineSettings,proto3,oneof" json:"human_engine_settings,omitempty"`
	BotSettings         *BotSettings              `protobuf:"bytes,5,opt,name=bot_settings,json=botSettings,proto3,oneof" json:"bot_settings,omitempty"`
	CacheSettings       *CachingSettings          `protobuf:"bytes,6,opt,name=cache_settings,json=cacheSettings,proto3,oneof" json:"cache_settings,omitempty"`
	Buckets             *BucketSettings           `protobuf:"bytes,7,opt,name=buckets,proto3,oneof" json:"buckets,omitempty"`
	PageRules           *PageRules                `protobuf:"bytes,8,opt,name=page_rules,json=pageRules,proto3,oneof" json:"page_rules,omitempty"`
	InternalSettings    *InternalSettings         `protobuf:"bytes,9,opt,name=internal_settings,json=internalSettings,proto3,oneof" json:"internal_settings,omitempty"`
	AppOriginSettings   *AppOriginSetting         `protobuf:"bytes,10,opt,name=app_origin_settings,json=appOriginSettings,proto3,oneof" json:"app_origin_settings,omitempty"`
}

func (x *PartialDomainSchema) Reset() {
	*x = PartialDomainSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialDomainSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialDomainSchema) ProtoMessage() {}

func (x *PartialDomainSchema) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialDomainSchema.ProtoReflect.Descriptor instead.
func (*PartialDomainSchema) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{6}
}

func (x *PartialDomainSchema) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PartialDomainSchema) GetOriginSettings() map[string]*OriginSetting {
	if x != nil {
		return x.OriginSettings
	}
	return nil
}

func (x *PartialDomainSchema) GetApiEngineSettings() *ApiEngineSettings {
	if x != nil {
		return x.ApiEngineSettings
	}
	return nil
}

func (x *PartialDomainSchema) GetHumanEngineSettings() *HumanEngine {
	if x != nil {
		return x.HumanEngineSettings
	}
	return nil
}

func (x *PartialDomainSchema) GetBotSettings() *BotSettings {
	if x != nil {
		return x.BotSettings
	}
	return nil
}

func (x *PartialDomainSchema) GetCacheSettings() *CachingSettings {
	if x != nil {
		return x.CacheSettings
	}
	return nil
}

func (x *PartialDomainSchema) GetBuckets() *BucketSettings {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *PartialDomainSchema) GetPageRules() *PageRules {
	if x != nil {
		return x.PageRules
	}
	return nil
}

func (x *PartialDomainSchema) GetInternalSettings() *InternalSettings {
	if x != nil {
		return x.InternalSettings
	}
	return nil
}

func (x *PartialDomainSchema) GetAppOriginSettings() *AppOriginSetting {
	if x != nil {
		return x.AppOriginSettings
	}
	return nil
}

type FullDomainSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain              string                    `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	OriginSettings      map[string]*OriginSetting `protobuf:"bytes,2,rep,name=origin_settings,json=originSettings,proto3" json:"origin_settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ApiEngineSettings   *ApiEngineSettings        `protobuf:"bytes,3,opt,name=api_engine_settings,json=apiEngineSettings,proto3" json:"api_engine_settings,omitempty"`
	HumanEngineSettings *HumanEngine              `protobuf:"bytes,4,opt,name=human_engine_settings,json=humanEngineSettings,proto3" json:"human_engine_settings,omitempty"`
	BotSettings         *BotSettings              `protobuf:"bytes,5,opt,name=bot_settings,json=botSettings,proto3" json:"bot_settings,omitempty"`
	CacheSettings       *CachingSettings          `protobuf:"bytes,6,opt,name=cache_settings,json=cacheSettings,proto3" json:"cache_settings,omitempty"`
	Buckets             *BucketSettings           `protobuf:"bytes,7,opt,name=buckets,proto3" json:"buckets,omitempty"`
	PageRules           *PageRules                `protobuf:"bytes,8,opt,name=page_rules,json=pageRules,proto3" json:"page_rules,omitempty"`
	InternalSettings    *InternalSettings         `protobuf:"bytes,9,opt,name=internal_settings,json=internalSettings,proto3" json:"internal_settings,omitempty"`
	AppOriginSettings   *AppOriginSetting         `protobuf:"bytes,10,opt,name=app_origin_settings,json=appOriginSettings,proto3,oneof" json:"app_origin_settings,omitempty"`
}

func (x *FullDomainSchema) Reset() {
	*x = FullDomainSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullDomainSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullDomainSchema) ProtoMessage() {}

func (x *FullDomainSchema) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullDomainSchema.ProtoReflect.Descriptor instead.
func (*FullDomainSchema) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{7}
}

func (x *FullDomainSchema) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *FullDomainSchema) GetOriginSettings() map[string]*OriginSetting {
	if x != nil {
		return x.OriginSettings
	}
	return nil
}

func (x *FullDomainSchema) GetApiEngineSettings() *ApiEngineSettings {
	if x != nil {
		return x.ApiEngineSettings
	}
	return nil
}

func (x *FullDomainSchema) GetHumanEngineSettings() *HumanEngine {
	if x != nil {
		return x.HumanEngineSettings
	}
	return nil
}

func (x *FullDomainSchema) GetBotSettings() *BotSettings {
	if x != nil {
		return x.BotSettings
	}
	return nil
}

func (x *FullDomainSchema) GetCacheSettings() *CachingSettings {
	if x != nil {
		return x.CacheSettings
	}
	return nil
}

func (x *FullDomainSchema) GetBuckets() *BucketSettings {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *FullDomainSchema) GetPageRules() *PageRules {
	if x != nil {
		return x.PageRules
	}
	return nil
}

func (x *FullDomainSchema) GetInternalSettings() *InternalSettings {
	if x != nil {
		return x.InternalSettings
	}
	return nil
}

func (x *FullDomainSchema) GetAppOriginSettings() *AppOriginSetting {
	if x != nil {
		return x.AppOriginSettings
	}
	return nil
}

type DeleteDomainSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *DeleteDomainSchema) Reset() {
	*x = DeleteDomainSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDomainSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDomainSchema) ProtoMessage() {}

func (x *DeleteDomainSchema) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDomainSchema.ProtoReflect.Descriptor instead.
func (*DeleteDomainSchema) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteDomainSchema) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// HUMAN ENGINE SETTINGS
type HumanEngine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode             HumanEngineMode `protobuf:"varint,1,opt,name=mode,proto3,enum=HumanEngineMode" json:"mode,omitempty"`
	TurboModeEnabled bool            `protobuf:"varint,2,opt,name=turboModeEnabled,proto3" json:"turboModeEnabled,omitempty"`
	TrafficLevel     string          `protobuf:"bytes,3,opt,name=traffic_level,json=trafficLevel,proto3" json:"traffic_level,omitempty"` // notifications are handled by the API and thus don't need to be shared with the proxy servers
}

func (x *HumanEngine) Reset() {
	*x = HumanEngine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanEngine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanEngine) ProtoMessage() {}

func (x *HumanEngine) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanEngine.ProtoReflect.Descriptor instead.
func (*HumanEngine) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{9}
}

func (x *HumanEngine) GetMode() HumanEngineMode {
	if x != nil {
		return x.Mode
	}
	return HumanEngineMode_Chill
}

func (x *HumanEngine) GetTurboModeEnabled() bool {
	if x != nil {
		return x.TurboModeEnabled
	}
	return false
}

func (x *HumanEngine) GetTrafficLevel() string {
	if x != nil {
		return x.TrafficLevel
	}
	return ""
}

// ORIGINS
type OriginSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host           string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Ssl            bool   `protobuf:"varint,2,opt,name=ssl,proto3" json:"ssl,omitempty"`
	Http2          bool   `protobuf:"varint,3,opt,name=http2,proto3" json:"http2,omitempty"`
	Timeout        int32  `protobuf:"zigzag32,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	IpData         bool   `protobuf:"varint,6,opt,name=ip_data,json=ipData,proto3" json:"ip_data,omitempty"`
	OriginFailover bool   `protobuf:"varint,7,opt,name=origin_failover,json=originFailover,proto3" json:"origin_failover,omitempty"`
	// keys
	Keys       [][]byte `protobuf:"bytes,8,rep,name=keys,proto3" json:"keys,omitempty"`
	PrivateKey []byte   `protobuf:"bytes,9,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// origins themselves
	Origins []*Origin `protobuf:"bytes,10,rep,name=origins,proto3" json:"origins,omitempty"`
	// if it's an app or not
	App bool `protobuf:"varint,11,opt,name=app,proto3" json:"app,omitempty"`
	// if it's an app, it will be this one
	AppName string `protobuf:"bytes,12,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *OriginSetting) Reset() {
	*x = OriginSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginSetting) ProtoMessage() {}

func (x *OriginSetting) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginSetting.ProtoReflect.Descriptor instead.
func (*OriginSetting) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{10}
}

func (x *OriginSetting) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *OriginSetting) GetSsl() bool {
	if x != nil {
		return x.Ssl
	}
	return false
}

func (x *OriginSetting) GetHttp2() bool {
	if x != nil {
		return x.Http2
	}
	return false
}

func (x *OriginSetting) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *OriginSetting) GetIpData() bool {
	if x != nil {
		return x.IpData
	}
	return false
}

func (x *OriginSetting) GetOriginFailover() bool {
	if x != nil {
		return x.OriginFailover
	}
	return false
}

func (x *OriginSetting) GetKeys() [][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *OriginSetting) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *OriginSetting) GetOrigins() []*Origin {
	if x != nil {
		return x.Origins
	}
	return nil
}

func (x *OriginSetting) GetApp() bool {
	if x != nil {
		return x.App
	}
	return false
}

func (x *OriginSetting) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type Origin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         string  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Weight      int32   `protobuf:"zigzag32,2,opt,name=weight,proto3" json:"weight,omitempty"`
	PretendHost *string `protobuf:"bytes,3,opt,name=pretend_host,json=pretendHost,proto3,oneof" json:"pretend_host,omitempty"`
}

func (x *Origin) Reset() {
	*x = Origin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Origin) ProtoMessage() {}

func (x *Origin) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Origin.ProtoReflect.Descriptor instead.
func (*Origin) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{11}
}

func (x *Origin) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Origin) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Origin) GetPretendHost() string {
	if x != nil && x.PretendHost != nil {
		return *x.PretendHost
	}
	return ""
}

// App origin settings
type AppOriginSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppOrigin []*AppOrigin `protobuf:"bytes,1,rep,name=app_origin,json=appOrigin,proto3" json:"app_origin,omitempty"`
	// origin setting
	OriginSetting *OriginSetting `protobuf:"bytes,2,opt,name=origin_setting,json=originSetting,proto3" json:"origin_setting,omitempty"`
}

func (x *AppOriginSetting) Reset() {
	*x = AppOriginSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppOriginSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppOriginSetting) ProtoMessage() {}

func (x *AppOriginSetting) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppOriginSetting.ProtoReflect.Descriptor instead.
func (*AppOriginSetting) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{12}
}

func (x *AppOriginSetting) GetAppOrigin() []*AppOrigin {
	if x != nil {
		return x.AppOrigin
	}
	return nil
}

func (x *AppOriginSetting) GetOriginSetting() *OriginSetting {
	if x != nil {
		return x.OriginSetting
	}
	return nil
}

type AppOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region Region `protobuf:"varint,1,opt,name=region,proto3,enum=Region" json:"region,omitempty"`
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Host   string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *AppOrigin) Reset() {
	*x = AppOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppOrigin) ProtoMessage() {}

func (x *AppOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppOrigin.ProtoReflect.Descriptor instead.
func (*AppOrigin) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{13}
}

func (x *AppOrigin) GetRegion() Region {
	if x != nil {
		return x.Region
	}
	return Region_ASH
}

func (x *AppOrigin) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AppOrigin) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// API ENGINE
type ApiEngineSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    bool                         `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	StrictMode bool                         `protobuf:"varint,2,opt,name=strict_mode,json=strictMode,proto3" json:"strict_mode,omitempty"`
	Settings   map[string]*ApiEngineSetting `protobuf:"bytes,3,rep,name=settings,proto3" json:"settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key is host + path
}

func (x *ApiEngineSettings) Reset() {
	*x = ApiEngineSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiEngineSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiEngineSettings) ProtoMessage() {}

func (x *ApiEngineSettings) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiEngineSettings.ProtoReflect.Descriptor instead.
func (*ApiEngineSettings) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{14}
}

func (x *ApiEngineSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ApiEngineSettings) GetStrictMode() bool {
	if x != nil {
		return x.StrictMode
	}
	return false
}

func (x *ApiEngineSettings) GetSettings() map[string]*ApiEngineSetting {
	if x != nil {
		return x.Settings
	}
	return nil
}

type ApiEngineSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KvWhitelistFactors map[string]string `protobuf:"bytes,1,rep,name=kv_whitelist_factors,json=kvWhitelistFactors,proto3" json:"kv_whitelist_factors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key_value header whitelist factors for this path
	Ips                []string          `protobuf:"bytes,2,rep,name=ips,proto3" json:"ips,omitempty"`
	OpenApi            bool              `protobuf:"varint,3,opt,name=open_api,json=openApi,proto3" json:"open_api,omitempty"`
	Rules              []*ApiEngineRule  `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ApiEngineSetting) Reset() {
	*x = ApiEngineSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiEngineSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiEngineSetting) ProtoMessage() {}

func (x *ApiEngineSetting) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiEngineSetting.ProtoReflect.Descriptor instead.
func (*ApiEngineSetting) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{15}
}

func (x *ApiEngineSetting) GetKvWhitelistFactors() map[string]string {
	if x != nil {
		return x.KvWhitelistFactors
	}
	return nil
}

func (x *ApiEngineSetting) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *ApiEngineSetting) GetOpenApi() bool {
	if x != nil {
		return x.OpenApi
	}
	return false
}

func (x *ApiEngineSetting) GetRules() []*ApiEngineRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ApiEngineRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Position           int32        `protobuf:"zigzag32,2,opt,name=position,proto3" json:"position,omitempty"`
	Path               []string     `protobuf:"bytes,3,rep,name=path,proto3" json:"path,omitempty"`
	MatchType          MatchType    `protobuf:"varint,4,opt,name=match_type,json=matchType,proto3,enum=MatchType" json:"match_type,omitempty"` // either "Exact", "Contains", or "StartsWith"
	AllowQueryString   bool         `protobuf:"varint,5,opt,name=allow_query_string,json=allowQueryString,proto3" json:"allow_query_string,omitempty"`
	WsMethods          []WsMethods  `protobuf:"varint,6,rep,packed,name=ws_methods,json=wsMethods,proto3,enum=WsMethods" json:"ws_methods,omitempty"`
	WebMethods         []WebMethods `protobuf:"varint,7,rep,packed,name=web_methods,json=webMethods,proto3,enum=WebMethods" json:"web_methods,omitempty"`
	RatelimitingBucket *string      `protobuf:"bytes,8,opt,name=ratelimiting_bucket,json=ratelimitingBucket,proto3,oneof" json:"ratelimiting_bucket,omitempty"` // {domain}_{id} format
	CacheLevel         *CacheLevel  `protobuf:"varint,9,opt,name=cache_level,json=cacheLevel,proto3,enum=CacheLevel,oneof" json:"cache_level,omitempty"`        // None, Standard, IgnoreQueryString or Aggressive
	CacheLevelTtl      *int32       `protobuf:"zigzag32,10,opt,name=cache_level_ttl,json=cacheLevelTtl,proto3,oneof" json:"cache_level_ttl,omitempty"`
	// human engine validation
	HumanEngineValidation bool `protobuf:"varint,11,opt,name=human_engine_validation,json=humanEngineValidation,proto3" json:"human_engine_validation,omitempty"`
}

func (x *ApiEngineRule) Reset() {
	*x = ApiEngineRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiEngineRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiEngineRule) ProtoMessage() {}

func (x *ApiEngineRule) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiEngineRule.ProtoReflect.Descriptor instead.
func (*ApiEngineRule) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{16}
}

func (x *ApiEngineRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApiEngineRule) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ApiEngineRule) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ApiEngineRule) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_UseStar
}

func (x *ApiEngineRule) GetAllowQueryString() bool {
	if x != nil {
		return x.AllowQueryString
	}
	return false
}

func (x *ApiEngineRule) GetWsMethods() []WsMethods {
	if x != nil {
		return x.WsMethods
	}
	return nil
}

func (x *ApiEngineRule) GetWebMethods() []WebMethods {
	if x != nil {
		return x.WebMethods
	}
	return nil
}

func (x *ApiEngineRule) GetRatelimitingBucket() string {
	if x != nil && x.RatelimitingBucket != nil {
		return *x.RatelimitingBucket
	}
	return ""
}

func (x *ApiEngineRule) GetCacheLevel() CacheLevel {
	if x != nil && x.CacheLevel != nil {
		return *x.CacheLevel
	}
	return CacheLevel_None
}

func (x *ApiEngineRule) GetCacheLevelTtl() int32 {
	if x != nil && x.CacheLevelTtl != nil {
		return *x.CacheLevelTtl
	}
	return 0
}

func (x *ApiEngineRule) GetHumanEngineValidation() bool {
	if x != nil {
		return x.HumanEngineValidation
	}
	return false
}

// CACHING SETTINGS
type CachingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    bool       `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CacheLevel CacheLevel `protobuf:"varint,2,opt,name=cache_level,json=cacheLevel,proto3,enum=CacheLevel" json:"cache_level,omitempty"`
	DefaultTtl int32      `protobuf:"zigzag32,3,opt,name=default_ttl,json=defaultTtl,proto3" json:"default_ttl,omitempty"`
}

func (x *CachingSettings) Reset() {
	*x = CachingSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachingSettings) ProtoMessage() {}

func (x *CachingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachingSettings.ProtoReflect.Descriptor instead.
func (*CachingSettings) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{17}
}

func (x *CachingSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CachingSettings) GetCacheLevel() CacheLevel {
	if x != nil {
		return x.CacheLevel
	}
	return CacheLevel_None
}

func (x *CachingSettings) GetDefaultTtl() int32 {
	if x != nil {
		return x.DefaultTtl
	}
	return 0
}

// BOT SETTINGS
type BotSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool  `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`           // if the management is enabled
	Bots    []Bot `protobuf:"varint,2,rep,packed,name=bots,proto3,enum=Bot" json:"bots,omitempty"` // the allowed bots
}

func (x *BotSettings) Reset() {
	*x = BotSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotSettings) ProtoMessage() {}

func (x *BotSettings) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotSettings.ProtoReflect.Descriptor instead.
func (*BotSettings) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{18}
}

func (x *BotSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BotSettings) GetBots() []Bot {
	if x != nil {
		return x.Bots
	}
	return nil
}

// RATELIMITING BUCKET SETTINGS
type BucketSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *BucketSettings) Reset() {
	*x = BucketSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketSettings) ProtoMessage() {}

func (x *BucketSettings) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketSettings.ProtoReflect.Descriptor instead.
func (*BucketSettings) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{19}
}

func (x *BucketSettings) GetBuckets() []*Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Premium   bool   `protobuf:"varint,3,opt,name=premium,proto3" json:"premium,omitempty"`
	Threshold int32  `protobuf:"zigzag32,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Timeout   int32  `protobuf:"zigzag32,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *Bucket) Reset() {
	*x = Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bucket) ProtoMessage() {}

func (x *Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bucket.ProtoReflect.Descriptor instead.
func (*Bucket) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{20}
}

func (x *Bucket) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Bucket) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bucket) GetPremium() bool {
	if x != nil {
		return x.Premium
	}
	return false
}

func (x *Bucket) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Bucket) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// PAGE RULES
type PageRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool        `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Rules   []*PageRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *PageRules) Reset() {
	*x = PageRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRules) ProtoMessage() {}

func (x *PageRules) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRules.ProtoReflect.Descriptor instead.
func (*PageRules) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{21}
}

func (x *PageRules) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PageRules) GetRules() []*PageRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type PageRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Order              int32    `protobuf:"zigzag32,2,opt,name=order,proto3" json:"order,omitempty"`
	Matches            []*Match `protobuf:"bytes,3,rep,name=matches,proto3" json:"matches,omitempty"`                                                 // things it can be matched on!
	TriggerRequirement string   `protobuf:"bytes,4,opt,name=trigger_requirement,json=triggerRequirement,proto3" json:"trigger_requirement,omitempty"` // either one, all, or multiple
	TriggerAmount      int32    `protobuf:"zigzag32,5,opt,name=trigger_amount,json=triggerAmount,proto3" json:"trigger_amount,omitempty"`             // if multiple is selected -- the amount of matches required to trigger the action
	Inversed           bool     `protobuf:"varint,6,opt,name=inversed,proto3" json:"inversed,omitempty"`
	Action             Action   `protobuf:"varint,7,opt,name=action,proto3,enum=Action" json:"action,omitempty"`
	// if action is monopoly ...
	MonopolyAction *MonopolyAction `protobuf:"varint,8,opt,name=monopoly_action,json=monopolyAction,proto3,enum=MonopolyAction,oneof" json:"monopoly_action,omitempty"`
	// if action is a trustbust ...
	TrustbustOption []TrustBustOption `protobuf:"varint,9,rep,packed,name=trustbust_option,json=trustbustOption,proto3,enum=TrustBustOption" json:"trustbust_option,omitempty"`
	// special action information
	// buckets
	BucketName *string `protobuf:"bytes,10,opt,name=bucket_name,json=bucketName,proto3,oneof" json:"bucket_name,omitempty"`
	// caching
	CacheLevel *CacheLevel `protobuf:"varint,11,opt,name=cache_level,json=cacheLevel,proto3,enum=CacheLevel,oneof" json:"cache_level,omitempty"`
	CacheTtl   *int32      `protobuf:"zigzag32,12,opt,name=cache_ttl,json=cacheTtl,proto3,oneof" json:"cache_ttl,omitempty"`
	// redirect to
	Redirect *string `protobuf:"bytes,13,opt,name=redirect,proto3,oneof" json:"redirect,omitempty"`
	// use backend, fetch from host
	BackendHost *string `protobuf:"bytes,14,opt,name=backend_host,json=backendHost,proto3,oneof" json:"backend_host,omitempty"`
	// if the backend host is an app
	AppName *string `protobuf:"bytes,15,opt,name=app_name,json=appName,proto3,oneof" json:"app_name,omitempty"`
	// if the rule is enabled
	Enabled bool `protobuf:"varint,16,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// the rule max (if it's enabled, -1 if not)
	RuleMax int32 `protobuf:"zigzag32,17,opt,name=rule_max,json=ruleMax,proto3" json:"rule_max,omitempty"`
}

func (x *PageRule) Reset() {
	*x = PageRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRule) ProtoMessage() {}

func (x *PageRule) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRule.ProtoReflect.Descriptor instead.
func (*PageRule) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{22}
}

func (x *PageRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PageRule) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *PageRule) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *PageRule) GetTriggerRequirement() string {
	if x != nil {
		return x.TriggerRequirement
	}
	return ""
}

func (x *PageRule) GetTriggerAmount() int32 {
	if x != nil {
		return x.TriggerAmount
	}
	return 0
}

func (x *PageRule) GetInversed() bool {
	if x != nil {
		return x.Inversed
	}
	return false
}

func (x *PageRule) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_Monopoly
}

func (x *PageRule) GetMonopolyAction() MonopolyAction {
	if x != nil && x.MonopolyAction != nil {
		return *x.MonopolyAction
	}
	return MonopolyAction_Block
}

func (x *PageRule) GetTrustbustOption() []TrustBustOption {
	if x != nil {
		return x.TrustbustOption
	}
	return nil
}

func (x *PageRule) GetBucketName() string {
	if x != nil && x.BucketName != nil {
		return *x.BucketName
	}
	return ""
}

func (x *PageRule) GetCacheLevel() CacheLevel {
	if x != nil && x.CacheLevel != nil {
		return *x.CacheLevel
	}
	return CacheLevel_None
}

func (x *PageRule) GetCacheTtl() int32 {
	if x != nil && x.CacheTtl != nil {
		return *x.CacheTtl
	}
	return 0
}

func (x *PageRule) GetRedirect() string {
	if x != nil && x.Redirect != nil {
		return *x.Redirect
	}
	return ""
}

func (x *PageRule) GetBackendHost() string {
	if x != nil && x.BackendHost != nil {
		return *x.BackendHost
	}
	return ""
}

func (x *PageRule) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *PageRule) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PageRule) GetRuleMax() int32 {
	if x != nil {
		return x.RuleMax
	}
	return 0
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerType TriggerType       `protobuf:"varint,1,opt,name=trigger_type,json=triggerType,proto3,enum=TriggerType" json:"trigger_type,omitempty"` // ip, path, bunch of other cool stuff
	MatchType   MatchType         `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3,enum=MatchType" json:"match_type,omitempty"`
	PureString  *string           `protobuf:"bytes,3,opt,name=pure_string,json=pureString,proto3,oneof" json:"pure_string,omitempty"`                                                                             // the string we are going to compare the fetched information to
	KeyValue    map[string]string `protobuf:"bytes,4,rep,name=key_value,json=keyValue,proto3" json:"key_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // or optionally, key value data. empty map if it doesn't use key value data.
	// special options
	Inversed bool `protobuf:"varint,5,opt,name=inversed,proto3" json:"inversed,omitempty"`
	Required bool `protobuf:"varint,6,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{23}
}

func (x *Match) GetTriggerType() TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return TriggerType_Ip
}

func (x *Match) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_UseStar
}

func (x *Match) GetPureString() string {
	if x != nil && x.PureString != nil {
		return *x.PureString
	}
	return ""
}

func (x *Match) GetKeyValue() map[string]string {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

func (x *Match) GetInversed() bool {
	if x != nil {
		return x.Inversed
	}
	return false
}

func (x *Match) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

// INTERNAL SETTINGS
type InternalSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanCache             bool  `protobuf:"varint,2,opt,name=can_cache,json=canCache,proto3" json:"can_cache,omitempty"`
	DomainBlocked        bool  `protobuf:"varint,3,opt,name=domain_blocked,json=domainBlocked,proto3" json:"domain_blocked,omitempty"`
	RequestTimeout       int32 `protobuf:"zigzag32,4,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"` // uploads and such
	ThreatScoreThreshold int32 `protobuf:"zigzag32,5,opt,name=threat_score_threshold,json=threatScoreThreshold,proto3" json:"threat_score_threshold,omitempty"`
	// expected figures
	ExpectedPassed  int32 `protobuf:"zigzag32,6,opt,name=expected_passed,json=expectedPassed,proto3" json:"expected_passed,omitempty"`
	ExpectedErrored int32 `protobuf:"zigzag32,7,opt,name=expected_errored,json=expectedErrored,proto3" json:"expected_errored,omitempty"`
	// bytes / 1000
	CacheFileMax            int32 `protobuf:"zigzag32,8,opt,name=cache_file_max,json=cacheFileMax,proto3" json:"cache_file_max,omitempty"`
	TotalCacheLimit         int32 `protobuf:"zigzag32,9,opt,name=total_cache_limit,json=totalCacheLimit,proto3" json:"total_cache_limit,omitempty"`
	AllowedOpenConns        int32 `protobuf:"zigzag32,10,opt,name=allowed_open_conns,json=allowedOpenConns,proto3" json:"allowed_open_conns,omitempty"`
	ServerMessagesThreshold int32 `protobuf:"zigzag32,11,opt,name=server_messages_threshold,json=serverMessagesThreshold,proto3" json:"server_messages_threshold,omitempty"` // ratelimit serv
	AllowedWsMessages       int32 `protobuf:"zigzag32,12,opt,name=allowed_ws_messages,json=allowedWsMessages,proto3" json:"allowed_ws_messages,omitempty"`                   // the amount of allowed websocket connections in 10 seconds
	// how much a domain can attempt to cache
	CacheAttempted int32 `protobuf:"zigzag32,13,opt,name=cache_attempted,json=cacheAttempted,proto3" json:"cache_attempted,omitempty"`
}

func (x *InternalSettings) Reset() {
	*x = InternalSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_gen_all_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalSettings) ProtoMessage() {}

func (x *InternalSettings) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_gen_all_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalSettings.ProtoReflect.Descriptor instead.
func (*InternalSettings) Descriptor() ([]byte, []int) {
	return file_rpc_gen_all_proto_rawDescGZIP(), []int{24}
}

func (x *InternalSettings) GetCanCache() bool {
	if x != nil {
		return x.CanCache
	}
	return false
}

func (x *InternalSettings) GetDomainBlocked() bool {
	if x != nil {
		return x.DomainBlocked
	}
	return false
}

func (x *InternalSettings) GetRequestTimeout() int32 {
	if x != nil {
		return x.RequestTimeout
	}
	return 0
}

func (x *InternalSettings) GetThreatScoreThreshold() int32 {
	if x != nil {
		return x.ThreatScoreThreshold
	}
	return 0
}

func (x *InternalSettings) GetExpectedPassed() int32 {
	if x != nil {
		return x.ExpectedPassed
	}
	return 0
}

func (x *InternalSettings) GetExpectedErrored() int32 {
	if x != nil {
		return x.ExpectedErrored
	}
	return 0
}

func (x *InternalSettings) GetCacheFileMax() int32 {
	if x != nil {
		return x.CacheFileMax
	}
	return 0
}

func (x *InternalSettings) GetTotalCacheLimit() int32 {
	if x != nil {
		return x.TotalCacheLimit
	}
	return 0
}

func (x *InternalSettings) GetAllowedOpenConns() int32 {
	if x != nil {
		return x.AllowedOpenConns
	}
	return 0
}

func (x *InternalSettings) GetServerMessagesThreshold() int32 {
	if x != nil {
		return x.ServerMessagesThreshold
	}
	return 0
}

func (x *InternalSettings) GetAllowedWsMessages() int32 {
	if x != nil {
		return x.AllowedWsMessages
	}
	return 0
}

func (x *InternalSettings) GetCacheAttempted() int32 {
	if x != nil {
		return x.CacheAttempted
	}
	return 0
}

var File_rpc_gen_all_proto protoreflect.FileDescriptor

var file_rpc_gen_all_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x34, 0x0a, 0x16,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x62, 0x67, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x72, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x72, 0x79, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x28, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x76, 0x65, 0x72,
	0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x37, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7a, 0x0a, 0x04, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x75,
	0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6c, 0x64,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x69, 0x6c, 0x64,
	0x63, 0x61, 0x72, 0x64, 0x22, 0x43, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x0f, 0x41, 0x6c,
	0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x72, 0x79,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x46, 0x75,
	0x6c, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0a,
	0x65, 0x76, 0x65, 0x72, 0x79, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0xe3, 0x06, 0x0a, 0x13, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x0f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x47, 0x0a,
	0x13, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x70, 0x69,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00,
	0x52, 0x11, 0x61, 0x70, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x15, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x48, 0x01, 0x52, 0x13, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x0c, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x48, 0x02, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x03, 0x52,
	0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x48, 0x04, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x48, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48,
	0x06, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x70, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x07, 0x52, 0x11, 0x61, 0x70, 0x70, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x51,
	0x0a, 0x13, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x68, 0x75,
	0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0xb3, 0x05, 0x0a, 0x10, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x4e, 0x0a,
	0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a,
	0x13, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x70, 0x69,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x11,
	0x61, 0x70, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x40, 0x0a, 0x15, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x13,
	0x68, 0x75, 0x6d, 0x61, 0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x0c, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x6f, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x0a,
	0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x13, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x41, 0x70, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11, 0x61, 0x70, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x51, 0x0a, 0x13, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x2c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x0b, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x75,
	0x72, 0x62, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xac, 0x02, 0x0a, 0x0d,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x73, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x73, 0x73, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x68, 0x74, 0x74, 0x70, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x69,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x70, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x06, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x64, 0x48,
	0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x65, 0x74, 0x65,
	0x6e, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x41, 0x70, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x50, 0x0a,
	0x09, 0x41, 0x70, 0x70, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22,
	0xdc, 0x01, 0x0a, 0x11, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x3c, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x4e,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89,
	0x02, 0x0a, 0x10, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x5b, 0x0a, 0x14, 0x6b, 0x76, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x76, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6b, 0x76,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x70, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x69, 0x12, 0x24, 0x0a,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x41,
	0x70, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x1a, 0x45, 0x0a, 0x17, 0x4b, 0x76, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x04, 0x0a, 0x0d, 0x41,
	0x70, 0x69, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x0a,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0a, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x0a, 0x77, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x57, 0x73, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x52, 0x09, 0x77, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x12, 0x2c, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x34,
	0x0a, 0x13, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x72,
	0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x02, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x74,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x74, 0x74, 0x6c, 0x22, 0x7a, 0x0a, 0x0f, 0x43, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x74, 0x6c, 0x22, 0x41, 0x0a, 0x0b, 0x42, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x04, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x04, 0x2e, 0x42, 0x6f,
	0x74, 0x52, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x22, 0x33, 0x0a, 0x0e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x7e, 0x0a, 0x06,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x46, 0x0a, 0x09,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x22, 0xe9, 0x05, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x0f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f,
	0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x70, 0x6f, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x10, 0x74, 0x72, 0x75, 0x73, 0x74, 0x62, 0x75, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x42,
	0x75, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x62, 0x75, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x74, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x11, 0x48, 0x03, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x54,
	0x74, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65,
	0x4d, 0x61, 0x78, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f, 0x70, 0x6f, 0x6c, 0x79,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x74, 0x74, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xc1, 0x02, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x09,
	0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x3b, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x9e, 0x04, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61,
	0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x14, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x73,
	0x12, 0x3a, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x17, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x77, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x11, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x57, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x41, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x65, 0x64, 0x2a, 0x57, 0x0a, 0x0e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x78, 0x61, 0x63, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x50, 0x61, 0x74, 0x68, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x74, 0x68, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x6e, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x74, 0x68, 0x10, 0x03, 0x2a, 0x40,
	0x0a, 0x0f, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x02,
	0x2a, 0x2c, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53,
	0x48, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x41, 0x58, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x35,
	0x0a, 0x09, 0x57, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x78, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x10, 0x03, 0x2a, 0x6e, 0x0a, 0x0a, 0x57, 0x65, 0x62, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x6f, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x75, 0x74,
	0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x10, 0x08, 0x2a, 0x29, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x10, 0x0a, 0x0c, 0x52, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x50, 0x49,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x50, 0x49, 0x10, 0x01,
	0x2a, 0x4b, 0x0a, 0x0a, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x67, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x10, 0x03, 0x2a, 0x32, 0x0a,
	0x03, 0x42, 0x6f, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x62, 0x6f,
	0x74, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x67, 0x62, 0x6f, 0x74, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x10,
	0x02, 0x2a, 0x96, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x70, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x74,
	0x68, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x73, 0x6e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x10,
	0x0a, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e, 0x79, 0x10, 0x0b, 0x2a, 0x41, 0x0a, 0x09, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x78, 0x61, 0x63, 0x74, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x10, 0x03, 0x2a, 0x28, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x72, 0x75, 0x73, 0x74, 0x62, 0x75,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x2a, 0x1b, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x6f, 0x70,
	0x6f, 0x6c, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x10, 0x00, 0x2a, 0x8e, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x75, 0x73, 0x74, 0x42, 0x75,
	0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x10, 0x05,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x6b, 0x69, 0x70, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x10, 0x06, 0x32, 0xc1, 0x03, 0x0a, 0x09, 0x42, 0x69, 0x67, 0x42, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x12, 0x0e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x1a, 0x10, 0x2e, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x34, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x14, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x0e, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x4e, 0x65, 0x77,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x11, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x0e, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x0e,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x12, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x0e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x06, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x06, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x1a, 0x0e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x05, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x1a, 0x0e,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x10, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x12, 0x15, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x1a, 0x0e, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x18, 0x5a, 0x16, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_gen_all_proto_rawDescOnce sync.Once
	file_rpc_gen_all_proto_rawDescData = file_rpc_gen_all_proto_rawDesc
)

func file_rpc_gen_all_proto_rawDescGZIP() []byte {
	file_rpc_gen_all_proto_rawDescOnce.Do(func() {
		file_rpc_gen_all_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_gen_all_proto_rawDescData)
	})
	return file_rpc_gen_all_proto_rawDescData
}

var file_rpc_gen_all_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_rpc_gen_all_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_rpc_gen_all_proto_goTypes = []interface{}{
	(CacheClearType)(0),          // 0: CacheClearType
	(HumanEngineMode)(0),         // 1: HumanEngineMode
	(Region)(0),                  // 2: Region
	(WsMethods)(0),               // 3: WsMethods
	(WebMethods)(0),              // 4: WebMethods
	(Actions)(0),                 // 5: Actions
	(CacheLevel)(0),              // 6: CacheLevel
	(Bot)(0),                     // 7: Bot
	(TriggerType)(0),             // 8: TriggerType
	(MatchType)(0),               // 9: MatchType
	(Action)(0),                  // 10: Action
	(MonopolyAction)(0),          // 11: MonopolyAction
	(TrustBustOption)(0),         // 12: TrustBustOption
	(*SmartChallengeScript)(nil), // 13: SmartChallengeScript
	(*ClearCacheMessage)(nil),    // 14: ClearCacheMessage
	(*Token)(nil),                // 15: Token
	(*Cert)(nil),                 // 16: Cert
	(*QueryResponse)(nil),        // 17: QueryResponse
	(*AllDomainSchema)(nil),      // 18: AllDomainSchema
	(*PartialDomainSchema)(nil),  // 19: PartialDomainSchema
	(*FullDomainSchema)(nil),     // 20: FullDomainSchema
	(*DeleteDomainSchema)(nil),   // 21: DeleteDomainSchema
	(*HumanEngine)(nil),          // 22: HumanEngine
	(*OriginSetting)(nil),        // 23: OriginSetting
	(*Origin)(nil),               // 24: Origin
	(*AppOriginSetting)(nil),     // 25: AppOriginSetting
	(*AppOrigin)(nil),            // 26: AppOrigin
	(*ApiEngineSettings)(nil),    // 27: ApiEngineSettings
	(*ApiEngineSetting)(nil),     // 28: ApiEngineSetting
	(*ApiEngineRule)(nil),        // 29: ApiEngineRule
	(*CachingSettings)(nil),      // 30: CachingSettings
	(*BotSettings)(nil),          // 31: BotSettings
	(*BucketSettings)(nil),       // 32: BucketSettings
	(*Bucket)(nil),               // 33: Bucket
	(*PageRules)(nil),            // 34: PageRules
	(*PageRule)(nil),             // 35: PageRule
	(*Match)(nil),                // 36: Match
	(*InternalSettings)(nil),     // 37: InternalSettings
	nil,                          // 38: PartialDomainSchema.OriginSettingsEntry
	nil,                          // 39: FullDomainSchema.OriginSettingsEntry
	nil,                          // 40: ApiEngineSettings.SettingsEntry
	nil,                          // 41: ApiEngineSetting.KvWhitelistFactorsEntry
	nil,                          // 42: Match.KeyValueEntry
}
var file_rpc_gen_all_proto_depIdxs = []int32{
	0,  // 0: ClearCacheMessage.type:type_name -> CacheClearType
	20, // 1: AllDomainSchema.everything:type_name -> FullDomainSchema
	16, // 2: AllDomainSchema.keys:type_name -> Cert
	13, // 3: AllDomainSchema.challenge:type_name -> SmartChallengeScript
	38, // 4: PartialDomainSchema.origin_settings:type_name -> PartialDomainSchema.OriginSettingsEntry
	27, // 5: PartialDomainSchema.api_engine_settings:type_name -> ApiEngineSettings
	22, // 6: PartialDomainSchema.human_engine_settings:type_name -> HumanEngine
	31, // 7: PartialDomainSchema.bot_settings:type_name -> BotSettings
	30, // 8: PartialDomainSchema.cache_settings:type_name -> CachingSettings
	32, // 9: PartialDomainSchema.buckets:type_name -> BucketSettings
	34, // 10: PartialDomainSchema.page_rules:type_name -> PageRules
	37, // 11: PartialDomainSchema.internal_settings:type_name -> InternalSettings
	25, // 12: PartialDomainSchema.app_origin_settings:type_name -> AppOriginSetting
	39, // 13: FullDomainSchema.origin_settings:type_name -> FullDomainSchema.OriginSettingsEntry
	27, // 14: FullDomainSchema.api_engine_settings:type_name -> ApiEngineSettings
	22, // 15: FullDomainSchema.human_engine_settings:type_name -> HumanEngine
	31, // 16: FullDomainSchema.bot_settings:type_name -> BotSettings
	30, // 17: FullDomainSchema.cache_settings:type_name -> CachingSettings
	32, // 18: FullDomainSchema.buckets:type_name -> BucketSettings
	34, // 19: FullDomainSchema.page_rules:type_name -> PageRules
	37, // 20: FullDomainSchema.internal_settings:type_name -> InternalSettings
	25, // 21: FullDomainSchema.app_origin_settings:type_name -> AppOriginSetting
	1,  // 22: HumanEngine.mode:type_name -> HumanEngineMode
	24, // 23: OriginSetting.origins:type_name -> Origin
	26, // 24: AppOriginSetting.app_origin:type_name -> AppOrigin
	23, // 25: AppOriginSetting.origin_setting:type_name -> OriginSetting
	2,  // 26: AppOrigin.region:type_name -> Region
	40, // 27: ApiEngineSettings.settings:type_name -> ApiEngineSettings.SettingsEntry
	41, // 28: ApiEngineSetting.kv_whitelist_factors:type_name -> ApiEngineSetting.KvWhitelistFactorsEntry
	29, // 29: ApiEngineSetting.rules:type_name -> ApiEngineRule
	9,  // 30: ApiEngineRule.match_type:type_name -> MatchType
	3,  // 31: ApiEngineRule.ws_methods:type_name -> WsMethods
	4,  // 32: ApiEngineRule.web_methods:type_name -> WebMethods
	6,  // 33: ApiEngineRule.cache_level:type_name -> CacheLevel
	6,  // 34: CachingSettings.cache_level:type_name -> CacheLevel
	7,  // 35: BotSettings.bots:type_name -> Bot
	33, // 36: BucketSettings.buckets:type_name -> Bucket
	35, // 37: PageRules.rules:type_name -> PageRule
	36, // 38: PageRule.matches:type_name -> Match
	10, // 39: PageRule.action:type_name -> Action
	11, // 40: PageRule.monopoly_action:type_name -> MonopolyAction
	12, // 41: PageRule.trustbust_option:type_name -> TrustBustOption
	6,  // 42: PageRule.cache_level:type_name -> CacheLevel
	8,  // 43: Match.trigger_type:type_name -> TriggerType
	9,  // 44: Match.match_type:type_name -> MatchType
	42, // 45: Match.key_value:type_name -> Match.KeyValueEntry
	23, // 46: PartialDomainSchema.OriginSettingsEntry.value:type_name -> OriginSetting
	23, // 47: FullDomainSchema.OriginSettingsEntry.value:type_name -> OriginSetting
	28, // 48: ApiEngineSettings.SettingsEntry.value:type_name -> ApiEngineSetting
	17, // 49: BigBaller.AllDomains:input_type -> QueryResponse
	19, // 50: BigBaller.UpdateDomain:input_type -> PartialDomainSchema
	20, // 51: BigBaller.NewDomain:input_type -> FullDomainSchema
	21, // 52: BigBaller.DeleteDomain:input_type -> DeleteDomainSchema
	14, // 53: BigBaller.ClearCache:input_type -> ClearCacheMessage
	15, // 54: BigBaller.Challenge:input_type -> Token
	15, // 55: BigBaller.ChallengeRemoval:input_type -> Token
	16, // 56: BigBaller.ChallengeCompleted:input_type -> Cert
	13, // 57: BigBaller.RefreshChallenge:input_type -> SmartChallengeScript
	18, // 58: BigBaller.AllDomains:output_type -> AllDomainSchema
	17, // 59: BigBaller.UpdateDomain:output_type -> QueryResponse
	17, // 60: BigBaller.NewDomain:output_type -> QueryResponse
	17, // 61: BigBaller.DeleteDomain:output_type -> QueryResponse
	17, // 62: BigBaller.ClearCache:output_type -> QueryResponse
	17, // 63: BigBaller.Challenge:output_type -> QueryResponse
	17, // 64: BigBaller.ChallengeRemoval:output_type -> QueryResponse
	17, // 65: BigBaller.ChallengeCompleted:output_type -> QueryResponse
	17, // 66: BigBaller.RefreshChallenge:output_type -> QueryResponse
	58, // [58:67] is the sub-list for method output_type
	49, // [49:58] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_rpc_gen_all_proto_init() }
func file_rpc_gen_all_proto_init() {
	if File_rpc_gen_all_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_gen_all_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartChallengeScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearCacheMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllDomainSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartialDomainSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullDomainSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDomainSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanEngine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Origin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppOriginSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiEngineSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiEngineSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiEngineRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachingSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_gen_all_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rpc_gen_all_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_rpc_gen_all_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_rpc_gen_all_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_rpc_gen_all_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_rpc_gen_all_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_rpc_gen_all_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_rpc_gen_all_proto_msgTypes[23].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_gen_all_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_gen_all_proto_goTypes,
		DependencyIndexes: file_rpc_gen_all_proto_depIdxs,
		EnumInfos:         file_rpc_gen_all_proto_enumTypes,
		MessageInfos:      file_rpc_gen_all_proto_msgTypes,
	}.Build()
	File_rpc_gen_all_proto = out.File
	file_rpc_gen_all_proto_rawDesc = nil
	file_rpc_gen_all_proto_goTypes = nil
	file_rpc_gen_all_proto_depIdxs = nil
}
